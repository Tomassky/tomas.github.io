<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git基础</title>
    <url>/2020/07/12/git_base/</url>
    <content><![CDATA[<hr>
<h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><ul>
<li>什么是Git<ul>
<li>Git中的数据库</li>
</ul>
</li>
<li>Git的基本操作<ul>
<li>安装Git</li>
<li>Git的基本命令</li>
<li>Git-tutorial Repository</li>
</ul>
</li>
<li>Git的分支<ul>
<li>Git分支操作</li>
<li>Git-tutorial Repository</li>
</ul>
</li>
<li>Git的合并<ul>
<li>Git-tutorial Repository</li>
</ul>
</li>
<li>Git的回滚撤销<ul>
<li>Git-tutorial Repository</li>
</ul>
</li>
<li>gitignore/fork同步<ul>
<li>Git-tutorial Repository</li>
</ul>
</li>
<li>Git的免密传送<ul>
<li>Git传输的协议</li>
<li>SSH协议登陆</li>
</ul>
</li>
<li>Git的工作流</li>
<li>常用工具</li>
</ul>
<h3 id="0X00-什么是Git"><a href="#0X00-什么是Git" class="headerlink" title="0X00 什么是Git"></a>0X00 什么是Git</h3><ul>
<li>分布式版本管理系统<ul>
<li>最初是为了管理Linux的系统内核</li>
<li>同FTP相同的功能</li>
<li>非线性管文件</li>
<li>速度快</li>
<li>对待数据更像一个快照流</li>
<li>可以在无网络的情况下进行提交到本地服务器，在有网络的情况下提交给远端的服务器</li>
</ul>
</li>
</ul>
<p><img src="/images/git/1-Git-Server-and-Computer.PNG" alt="1-Git-Server and Computer"></p>
<ul>
<li>方式：直接记录快照而非方式，每次修改需要一次Commit</li>
<li>保证完整性：计算校验和（哈希算法），Git存取的是哈希值</li>
</ul>
<p><img src="/images/git/1-Git--Snaphost.PNG" alt="1-Git--Snaphost"></p>
<p><img src="/images/git/1-Git--%E5%AE%8C%E6%95%B4%E6%80%A7.PNG" alt="1-Git--完整性"></p>
<h5 id="Git中的数据库"><a href="#Git中的数据库" class="headerlink" title="Git中的数据库"></a>Git中的数据库</h5><ul>
<li>Git仓库–.git directory：保存项目数据，元数据的地方，git自己维护的文件夹</li>
<li>工作目录–Working Directory：内容自Git仓库，对当前项目某一版本独立提取出来的内容</li>
<li>暂存区–Staging Area：保存下次提交的文件目录，也算是一个索引</li>
<li>三个概念<ul>
<li>已提交：Git目录中保存着的特定版本文件</li>
<li>已暂存：做了修改并放在暂存区</li>
<li>已修改：做了修改但还没有放到暂存区</li>
</ul>
</li>
<li>远程仓库–Remote：多人操作的仓库</li>
</ul>
<p><img src="/images/git/1-Git%E4%BB%93%E5%BA%93-1.PNG" alt="1-Git仓库-1"></p>
<p><img src="/images/git/1-Git%E4%BB%93%E5%BA%93-2.PNG" alt="1-Git仓库-2"></p>
<h3 id="0X01-Git的基本操作"><a href="#0X01-Git的基本操作" class="headerlink" title="0X01 Git的基本操作"></a>0X01 Git的基本操作</h3><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><ul>
<li>下载git OXS版本（一般为内置/brew install git安装）</li>
<li>下载git WindowS版本（Git网页下载Git）</li>
<li>下载git Linux版本（apt-get install git-all/yum -y install git）</li>
</ul>
<h5 id="Git的基本命令"><a href="#Git的基本命令" class="headerlink" title="Git的基本命令"></a>Git的基本命令</h5><ul>
<li>▲ 提交到远程仓库需要在Github上创建一个仓库</li>
<li>Git的版本<ul>
<li><strong><code>🔺命令：git version</code></strong></li>
</ul>
</li>
<li>Git的用户信息<ul>
<li>名字：<strong><code>🔺命令：git config --global user.name &quot;tomas&quot;</code></strong></li>
<li>邮箱：<strong><code>🔺命令：git config --global user.email &quot;643008933@qq.com&quot;</code></strong></li>
<li>配置文件：~/.gitconfig（可设置代理，配置信息）</li>
</ul>
</li>
<li>Git的基本命令<ul>
<li>初始化：<strong><code>🔺命令：git init</code></strong></li>
<li>仓库状态：<strong><code>🔺命令：git status</code></strong></li>
<li>添加文件到暂存区管理：<strong><code>🔺命令：git add 文件名</code></strong><ul>
<li>-A，所有文件</li>
</ul>
</li>
<li>从暂存区删除文件：<strong><code>🔺命令：git rm --cacahe 文件名</code></strong></li>
<li>查看文件：<strong><code>🔺命令：..git → cat index</code></strong></li>
<li>提交：<strong><code>🔺命令：git commit -m &quot;文件名&quot;</code></strong><ul>
<li>-m：描述提交的内容</li>
</ul>
</li>
<li>建立连接：<strong><code>🔺命令：git remote add origin https://.....</code></strong></li>
<li>查看远端信息：<strong><code>🔺命令：git remote -v</code></strong></li>
<li>提交本地文件到远端服务器：<strong><code>🔺命令：git push origin master -u</code></strong><ul>
<li>origin：远端仓库名称</li>
<li>master：本地仓库名称</li>
<li>-u：后续不需要输入名称</li>
<li>:master ：删除远端的分支</li>
<li>master:m1 ：更改远端分支名称为m1</li>
</ul>
</li>
<li>克隆远程仓库到本地：<strong><code>🔺命令：git clone https://..... git-demo</code></strong><ul>
<li>git-demo：为拉取到本地仓库的名称</li>
</ul>
</li>
<li>拉取远端仓库修改数据到本地：<strong><code>🔺命令：git pull origin master</code></strong><ul>
<li>origin：远端仓库名称</li>
<li>master：本地仓库名称</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Git-tutorial-Repository"><a href="#Git-tutorial-Repository" class="headerlink" title="Git-tutorial Repository"></a>Git-tutorial Repository</h5><ul>
<li>mkdir git-tutorial</li>
<li>cd git-tutorial</li>
<li>git init</li>
<li>ll</li>
<li>touch README.md</li>
<li>git status</li>
<li>git add README.md</li>
<li>git status</li>
<li>git rm –cacahe README.md</li>
<li>git status</li>
<li>git add README.md -A</li>
<li>git status</li>
<li>git commit -m “README.md”</li>
<li>git remote add origin <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>..</li>
<li>git remote -v</li>
<li>git push origin master -u</li>
<li>查看Github是否有新建一个仓库并有README.md</li>
<li>cd ..</li>
<li>git clone https://… git-demo</li>
<li>vim README.md</li>
<li>Hello world → wq</li>
<li>git status</li>
<li>git add README.md</li>
<li>git commit -m “modify README.md”</li>
<li>cd ..</li>
<li>cd git-tutorial</li>
<li>git pull origin master</li>
<li>查看Github建立的仓库中的README.md是否有内容</li>
</ul>
<h3 id="0X02-Git的分支"><a href="#0X02-Git的分支" class="headerlink" title="0X02 Git的分支"></a>0X02 Git的分支</h3><ul>
<li>版本发布、功能增加、错误修改</li>
</ul>
<p><img src="/images/git/3-Git%E5%88%86%E6%94%AF-1.PNG" alt="3-Git分支-1"></p>
<p><img src="/images/git/3-Git%E5%88%86%E6%94%AF-2.PNG" alt="3-Git分支-2"></p>
<ul>
<li>分支发布合并</li>
</ul>
<p><img src="/images/git/3-Git%E5%88%86%E6%94%AF-3.PNG" alt="3-Git分支-3"></p>
<h5 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h5><ul>
<li>创建分支：<strong><code>🔺命令：git branch 分支名</code></strong><ul>
<li>基于某个分支创建的分支，会复制其内容</li>
</ul>
</li>
<li>查看分支：<strong><code>🔺命令：git branch</code></strong></li>
<li>跳转分支：<strong><code>🔺命令：git checkout 分支名</code></strong>   </li>
<li>创建分支并跳转：<strong><code>🔺命令：git checkout -b 分支名</code></strong></li>
<li>删除分支：<strong><code>🔺命令：git branch -d 分支名</code></strong><ul>
<li>▲ 无合并到master的分支无法删除，或者使用-D参数`**</li>
</ul>
</li>
<li>合并分支：<strong><code>🔺命令：git merge 分支名</code></strong></li>
</ul>
<h5 id="Git-tutorial-Repository-1"><a href="#Git-tutorial-Repository-1" class="headerlink" title="Git-tutorial Repository"></a>Git-tutorial Repository</h5><ul>
<li>cd git-tutorial</li>
<li>git branch feature1</li>
<li>git branch</li>
<li>git checkout feature1</li>
<li>touch a.txt</li>
<li>vim a.txt</li>
<li>this is a.txt → wq</li>
<li>git add a.txt</li>
<li>git commit -m “a.txt”</li>
<li>git branch feature2</li>
<li>git checkout feature2</li>
<li>git checkout -b feature3</li>
<li>git branch</li>
<li>git branch -d feature2</li>
<li>touch b.txt</li>
<li>vim b.txt</li>
<li>this is b.txt → wq</li>
<li>git add b.txt</li>
<li>git commit -m “b.txt”</li>
<li>git checkout master</li>
<li>git branch -d feature3</li>
<li>git merge feature3</li>
<li>git push</li>
<li>查看Github仓库是否有a.txt和b.txt，但无其他分支</li>
<li>git branch feature1</li>
<li>git push origin feature1</li>
<li>查看Github仓库是否有feature1分支</li>
<li>git push origin :feature1</li>
<li>查看Github仓库是否无feature1分支</li>
<li>git push origin feature1:f1</li>
<li>查看Github仓库的feature1是否更改为f1</li>
</ul>
<h3 id="0X03-Git的合并"><a href="#0X03-Git的合并" class="headerlink" title="0X03 Git的合并"></a>0X03 Git的合并</h3><ul>
<li>▲ 可以在Stackoverflow上看git log多样格式</li>
<li>▲ rebase的黄金法则：绝对不要在公共分支使用rebase</li>
<li>查看日志：git log<ul>
<li>–oneline：一行的提交信息</li>
<li>–oneline -3：只取前面3行</li>
</ul>
</li>
<li>查看添加的内容：<strong><code>🔺命令：git show 哈希值</code></strong></li>
<li>查看提交方式：<strong><code>🔺命令：git merge --help</code></strong><ul>
<li>–ff（fast-forward）：默认不产生一次commit</li>
<li>–no-ff：产生一个commit</li>
</ul>
</li>
<li>移动分支，并将master分支的提交并入：<strong><code>🔺命令：git rebase</code></strong></li>
<li>查看版本分支报错情况：<strong><code>🔺命令：git mergetool</code></strong><ul>
<li>通过工具修改后，会生成一个x.txt.orig，保存冲突的现场</li>
</ul>
</li>
</ul>
<blockquote>
<p>   merge和rebase<br>   merge：两个分支的修改提交，默认不提交，关注点在合并操作上<br>   rebase：将当前分支做的修改，复制在目标分支的最后一次中，关注点在开发的过程上 </p>
</blockquote>
<h5 id="Git-tutorial-Repository-2"><a href="#Git-tutorial-Repository-2" class="headerlink" title="Git-tutorial Repository"></a>Git-tutorial Repository</h5><ul>
<li>cd git-tutorial</li>
<li>git branch -d f1</li>
<li>git push origin :f1</li>
<li>git log</li>
<li>q</li>
<li>git log –oneline</li>
<li>git log –oneline -3</li>
<li>git show d156c23</li>
<li>vi ~/.config → dog = log –all –decorate –oneline –graph</li>
<li>git dog</li>
<li>git checkout -b f1</li>
<li>touch fa.txt</li>
<li>git add fa.txt</li>
<li>git commit -m “add fa”</li>
<li>git dog</li>
<li>git checkout master</li>
<li>git merge f1</li>
<li>git dog</li>
<li>git checkout f1</li>
<li>touch fb.txt</li>
<li>git commit -m “add fb”</li>
<li>git checkout f1</li>
<li>git merge f1 –no-ff</li>
<li>git dog</li>
<li>git push</li>
<li>git push origin f1</li>
<li>远程修改master中的a.txt</li>
<li>git pull</li>
<li>git checkout f1</li>
<li>git merge master</li>
<li>git dog</li>
<li>git checkout master</li>
<li>touch m1.txt</li>
<li>git add m1.txt</li>
<li>git commit -m “add m1”</li>
<li>git checkout f1</li>
<li>git dog</li>
<li>git rebase</li>
<li>git dog</li>
<li>git checkout -b f2</li>
<li>vim a.txt</li>
<li>this is b.txt</li>
<li>git add a.txt</li>
<li>git commit -m “update a.txt”</li>
<li>git checkout f1</li>
<li>vi a.txt</li>
<li>this is c.txt</li>
<li>git add a.txt</li>
<li>git commit -m “update c.txt”</li>
<li>git checkout f2</li>
<li>git merge f1</li>
<li>cat a.txt</li>
<li>git mergetool</li>
<li>rm a.txt.orig</li>
<li>git commit -m “update a.txt”</li>
<li>git dog</li>
</ul>
<h3 id="0X04-Git的回滚撤销"><a href="#0X04-Git的回滚撤销" class="headerlink" title="0X04 Git的回滚撤销"></a>0X04 Git的回滚撤销</h3><ul>
<li>返回前一次的记录：<strong><code>🔺命令：git reset master^/~5/hash值id</code></strong><ul>
<li>^：每一个^符号标识[前一次]，如^^^表示回退三次</li>
<li><del>：回退次数加在后面，如</del>5</li>
<li>hash值id：回退到id号的版本</li>
<li>–mix：把暂存区的文件丢弃，但不会动到工作目录的文件（默认方式）</li>
<li>–soft：工作目录跟暂存区的文件都不会被丢弃</li>
<li>–hard：不管是工作目录以及暂存区的文件都会丢弃</li>
</ul>
</li>
<li>所有的日志文件：<strong><code>🔺命令：git reflog</code></strong></li>
<li>撤销某次操作：<strong><code>🔺命令：git revert</code></strong><ul>
<li>此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交</li>
</ul>
</li>
<li>▲ 在公用分支上应用revert，在私用分支上用reset</li>
</ul>
<blockquote>
<pre><code>reset和revert
revert：用一次新的commit来回滚之前的commit
reset：只是将旧的commit指针移动，并无删除旧的commit</code></pre></blockquote>
<h5 id="Git-tutorial-Repository-3"><a href="#Git-tutorial-Repository-3" class="headerlink" title="Git-tutorial Repository"></a>Git-tutorial Repository</h5><ul>
<li>cd git-tutorial</li>
<li>touch hello.java</li>
<li>git add hello.java</li>
<li>git commit -m “hellp.java”</li>
<li>git dog</li>
<li>git reset master^</li>
<li>git status</li>
<li>ll</li>
<li>git add hello.java</li>
<li>git commit -m “add Hello.java”</li>
<li>git dog</li>
<li>git reset cd0309f</li>
<li>git status</li>
<li>git reset –hard 7d37397</li>
<li>git status</li>
<li>ll</li>
<li>touch c.txt</li>
<li>git add c.txt</li>
<li>git commit -m “add c.txt”</li>
<li>git dog</li>
<li>git reset –soft 7d37397</li>
<li>git status</li>
<li>git reflog</li>
<li>git reset –hard 00bd027</li>
<li>ll</li>
<li>git rest –hard HEAD</li>
<li>git dog</li>
<li>git revert</li>
<li>git log</li>
<li>git revert hash值id（Commit的ID）</li>
<li>git dog</li>
</ul>
<h3 id="0X05-gitignore-fork同步"><a href="#0X05-gitignore-fork同步" class="headerlink" title="0X05 gitignore/fork同步"></a>0X05 gitignore/fork同步</h3><ul>
<li>创建一个.gitignore文件，保存要忽略的内容<ul>
<li>忽略系统生成的文件，如IDE的配置</li>
<li>忽略编译生成的中间文件、可执行文件等</li>
<li>忽略敏感的配置文件和本地不想提交的脚本</li>
</ul>
</li>
<li>常用参数<ul>
<li>配置文件：.settings/</li>
<li>脚本文件：*.sh</li>
<li>上次所有txt文件：!*.txt</li>
<li>某个目录：/a/*.class</li>
</ul>
</li>
<li>gitignore网站：<a href="https://www.gitignore.io" target="_blank" rel="noopener">https://www.gitignore.io</a></li>
<li>查看远程的版本信息：<strong><code>🔺命令：git remote -v</code></strong></li>
<li>增加一个远程仓库上传流：<strong><code>🔺命令：git remote add upstream https://...</code></strong></li>
<li>更新远程仓库的版本：<strong><code>🔺命令：git fetch upstream 分支名</code></strong><ul>
<li>分支名默认省略，则为master分支</li>
<li>▲ pull = fetch + merge</li>
</ul>
</li>
<li>查看远程原始仓库的分支：<strong><code>🔺命令：git branch -r</code></strong></li>
</ul>
<h5 id="Git-tutorial-Repository-4"><a href="#Git-tutorial-Repository-4" class="headerlink" title="Git-tutorial Repository"></a>Git-tutorial Repository</h5><ul>
<li>cd git-tutorial</li>
<li>git add -A .</li>
<li>git commit -m “add gitignore”</li>
<li>git push -f</li>
<li>git clone https://……awesome</li>
<li>cd awesome</li>
<li>git remote -v</li>
<li>git remote add upstream https://…</li>
<li>git remote -v</li>
<li>git fetch upstream </li>
<li>git branch -r</li>
<li>git rebase upstream/master<ul>
<li>merge关注的是提交的历史，将两次操作合并，但无提交数据，rebase则足够</li>
</ul>
</li>
<li>git push</li>
<li>git log</li>
</ul>
<h3 id="0X06-Git的免密传送"><a href="#0X06-Git的免密传送" class="headerlink" title="0X06 Git的免密传送"></a>0X06 Git的免密传送</h3><h5 id="Git传输的协议"><a href="#Git传输的协议" class="headerlink" title="Git传输的协议"></a>Git传输的协议</h5><ul>
<li>local协议</li>
<li>HTTP(S)协议：需要输入账号密码</li>
<li>SSH协议：不需要输入账号密码</li>
<li>Git协议</li>
<li><a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">Git免密推送</a></li>
</ul>
<h5 id="SSH协议登陆"><a href="#SSH协议登陆" class="headerlink" title="SSH协议登陆"></a>SSH协议登陆</h5><ul>
<li>在个人界面的Settings处</li>
<li>SSH and GPG keys</li>
<li>generating SSH keys</li>
<li>Generating a new SSH key and adding it to the ssh-agent</li>
<li>Windows<ul>
<li>ssh-keygen -t rsa -b 4096 -C “<a href="mailto:643008933@qq.com" target="_blank" rel="noopener">643008933@qq.com</a>“<ul>
<li>Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter]</li>
<li>Enter passphrase (empty for no passphrase): [Type a passphrase]</li>
<li>Enter same passphrase again: [Type passphrase again]</li>
</ul>
</li>
<li>eval $(ssh-agent -s)</li>
<li>ssh-add ~/.ssh/id_rsa</li>
<li>cat ~/.ssh/id_rsa.public</li>
<li>复制公钥到New SSH Key</li>
</ul>
</li>
<li>git clone with SSH</li>
<li>touch a.txt</li>
<li>git add a.txt</li>
<li>git commit -m “add a.txt”</li>
<li>git push（看是否需要账号密码登陆）</li>
<li>▲ 2020.04.14 使用SSH协议登陆<ul>
<li>git remote -v：查看git clone方式，如果是origin <a href="https://github.com......开头就说明需要调整" target="_blank" rel="noopener">https://github.com......开头就说明需要调整</a></li>
<li>git remote rm origin：移除原来的git源</li>
<li>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxx.git：添加新的git源头（地址修改为要调整的）</li>
<li>git remote -v：再查看git方式，如果是origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>….就开头就说明OK了，重新commit或者push就不用每次都输入账号密码了</li>
</ul>
</li>
</ul>
<h3 id="0X07-Git的工作流"><a href="#0X07-Git的工作流" class="headerlink" title="0X07 Git的工作流"></a>0X07 Git的工作流</h3><ul>
<li><a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md" target="_blank" rel="noopener">Git工作流指南</a></li>
<li>集中式工作流</li>
<li>功能分支工作流</li>
<li>Gitflow工作流</li>
<li>Forking工作流</li>
</ul>
<h3 id="0X08-常用工具"><a href="#0X08-常用工具" class="headerlink" title="0X08 常用工具"></a>0X08 常用工具</h3><ul>
<li>sourcetree</li>
<li>vscode</li>
<li>git图标：<a href="https://gitmoji.surge.sh" target="_blank" rel="noopener">https://gitmoji.surge.sh</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>IPS基础</title>
    <url>/2020/07/12/ips_base/</url>
    <content><![CDATA[<hr>
<h2 id="IPS基础"><a href="#IPS基础" class="headerlink" title="IPS基础"></a>IPS基础</h2><ul>
<li>IPS基础<ul>
<li>一个真实的蠕虫攻击</li>
<li>IDS产品</li>
<li>IPS产品</li>
<li>IPS/IDS技术发展历程</li>
<li>IPS、IDS、防火墙</li>
<li>技术介绍</li>
<li>躲避手段</li>
<li>Cisco 4240</li>
<li>实验</li>
</ul>
</li>
<li>IPS环境搭建<ul>
<li>选择GNS</li>
<li>初始化IPS</li>
<li>IME</li>
</ul>
</li>
<li>IME–IPS使用<ul>
<li>常用的网络安全设备</li>
<li>IPS -&gt; Sensor Setup</li>
<li>IPS出入流量策略</li>
<li>IPS -&gt; Interface</li>
<li>IPS -&gt; Policies</li>
</ul>
</li>
<li>IME–IDS实验<ul>
<li>IDS模拟实验</li>
<li>IDS：IPS-4240</li>
<li>R1和R2</li>
<li>SW：EtherSwitch router</li>
<li>测试连通性</li>
<li>SPAN配置</li>
<li>入侵检测</li>
</ul>
</li>
<li>IME–IPS实验<ul>
<li>IPS模拟实验</li>
<li>IPS：IPS-4240</li>
<li>R1和R2</li>
<li>SW：EtherSwitch router</li>
<li>测试连通性</li>
<li>拓扑配置</li>
<li>入侵检测</li>
</ul>
</li>
</ul>
<h3 id="0X00-IPS基础"><a href="#0X00-IPS基础" class="headerlink" title="0X00 IPS基础"></a>0X00 IPS基础</h3><h5 id="一个真实的蠕虫攻击"><a href="#一个真实的蠕虫攻击" class="headerlink" title="一个真实的蠕虫攻击"></a>一个真实的蠕虫攻击</h5><ul>
<li>扫描，发现主机</li>
<li>向目标主机发送溢出报文，控制目标机</li>
<li>获取目标机控制权</li>
<li>目标机发攻击<ul>
<li>向新受害者发起攻击，最终形成规模攻击</li>
<li>将真正攻击者隐藏，增加追查难度</li>
</ul>
</li>
<li>▲ 蠕虫病毒具有自传播性，可以感染整个内网，不同于其他的病毒</li>
</ul>
<p><img src="/images/ips/ips-notepad/%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E6%94%BB%E5%87%BB.png" alt="蠕虫病毒攻击"></p>
<p><img src="/images/ips/ips-notepad/%E5%95%86%E4%B8%9A%E5%8C%96%E9%98%B2%E6%94%BB%E5%87%BB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="商业化防攻击解决方案"></p>
<h5 id="IDS产品"><a href="#IDS产品" class="headerlink" title="IDS产品"></a>IDS产品</h5><ul>
<li>IDS定义：Intrusion Detection System，入侵检测系统<ul>
<li>An intrusion detection system has the capability to <strong>detect</strong> misuse and abuse of,and unauthorized access to,netwoeked resources.</li>
</ul>
</li>
<li>IDS的两个关键特征<ul>
<li>实现应用层威胁识别，提供对网络数据的“监视功能”</li>
<li>旁路部署，与防火墙配合实现安全防范</li>
</ul>
</li>
<li>IDS优势<ul>
<li>IDS不影响网络</li>
<li>IDS的损坏不会影响到网络的功能</li>
<li>一旦超过了IDS的处理能力不会影响到网络流量，虽然这些数据不能够被IDS分析</li>
</ul>
</li>
<li>IDS问题<ul>
<li>IDS response action不能够阻止初始化包，也不能够保证阻止一个连接，IDS的响应技术能够比较好的阻止一个攻击者而不是一个攻击（Reset，Block）</li>
<li>IDS更容易受到网络逃避技术的攻击</li>
</ul>
</li>
<li><strong>注意</strong><ul>
<li>▲ IDS一般用于全流量镜像分析</li>
</ul>
</li>
</ul>
<h5 id="IPS产品"><a href="#IPS产品" class="headerlink" title="IPS产品"></a>IPS产品</h5><ul>
<li>IPS定义：Intrusion Prevention System，入侵防御系统<ul>
<li>An intrusion detection system has the capability to <strong>detect and prevent</strong> misuse and abuse of,and unauthorized access to,netwoeked resources.</li>
</ul>
</li>
<li>IPS的两个关键特征<ul>
<li>深入七层的数据流攻击特征检测<ul>
<li>蠕虫、基于Web的攻击、利用漏洞的攻击、网页篡改、木马、病毒、P2P滥用、DoS/DDoS等</li>
</ul>
</li>
<li>在线部署，实时阻断攻击</li>
</ul>
</li>
<li>IPS优势<ul>
<li>IPS deny action能够阻止触发包，后续数据包，或者所有源至于攻击者的包</li>
<li>IPS能够使用流量规范化技术，减少或者消除很多网络逃避技术</li>
<li>IPS能够有效的阻止蠕虫</li>
</ul>
</li>
<li>IPS问题<ul>
<li>IPS的错误或者损坏会影响到网络的流量</li>
<li>一旦超过了IPS的处理能力，会影响到网络的正常工作</li>
<li>IPS会影响到对时间敏感的运用程序，例如VOIP</li>
</ul>
</li>
<li>衡量IPS的标准<ul>
<li>False positive（错报）</li>
<li>False negative（漏报）</li>
</ul>
</li>
<li>⭐ IPS三种接口类型<ul>
<li>Command and Control Interface<ul>
<li>描述：带外网管口（插网线）</li>
<li>功能：需要配置IP地址，有路由能力，管理流量（https/ssh/telnet）从此接口进入</li>
</ul>
</li>
<li>Console and AUX port<ul>
<li>描述：Console AUX管理接口（插Console线）</li>
<li>功能：CLI带外管理（命令行）</li>
</ul>
</li>
<li>Monitoring（Sensor）Interfaces<ul>
<li>描述：监控接口（插网线）</li>
<li>功能：不能配置IP地址，没有路由能力，监控流量从此接口进入<ul>
<li>IPS工作模式</li>
</ul>
</li>
</ul>
</li>
<li>Promiscuous-Mode Protection：IDS</li>
<li>Inline-Mode Protection：IPS</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IPS--IDS%E9%83%A8%E7%BD%B2.png" alt="IPS--IDS部署"></p>
<p><img src="/images/ips/ips-notepad/IPS--IPS%E9%83%A8%E7%BD%B2.png" alt="IPS--IPS部署"></p>
<ul>
<li><strong>注意</strong>：<ul>
<li>▲ 可以单一部署IPS</li>
<li>▲ IPS可以类比于外部的AV查杀软件</li>
</ul>
</li>
</ul>
<h5 id="IPS-IDS技术发展历程"><a href="#IPS-IDS技术发展历程" class="headerlink" title="IPS/IDS技术发展历程"></a>IPS/IDS技术发展历程</h5><ul>
<li>1987年，入侵安全检测专家系统模型的提出</li>
<li>1988年，Morris蠕虫的爆发，促进了IDS开发研制</li>
<li>1990年，网络IDS–NSM（网络安全监视）用来检测所监视的广域网的网络流量的可疑行为</li>
<li>1998年，开源IDS：Snort</li>
<li>2000年，非IDS厂商提出IPS概念，并发布产品</li>
<li>2003年，主流开始使用IPS</li>
</ul>
<h5 id="IPS、IDS、防火墙"><a href="#IPS、IDS、防火墙" class="headerlink" title="IPS、IDS、防火墙"></a>IPS、IDS、防火墙</h5><ul>
<li>在网络环境中，FW、IPS一前一后部署，形成纵深的立体防御</li>
</ul>
<p><img src="/images/ips/ips-notepad/IPS%E4%B8%8E%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%AF%94%E8%BE%83.png" alt="IPS与防火墙的比较"></p>
<ul>
<li>由于IDS与生俱来的缺陷，IPS必将全面取代IDS。DPtech IPS 2000可以同时实现IPS/IDS</li>
</ul>
<p><img src="/images/ips/ips-notepad/IPS%E4%B8%8EIDS%E7%9A%84%E6%AF%94%E8%BE%83.png" alt="IPS与IDS的比较"></p>
<ul>
<li>防火墙主要提供安全区域隔离、访问控制和VPN功能、不能有效检测并阻断夹杂在正常流量中的应用层攻击代码<ul>
<li>DMZ区域对外提供服务</li>
</ul>
</li>
<li>IDS由于旁路部署，侧重安全状态监控，需要和防火墙联动才能抵御威胁，适用于“事后审计”，无法满足实时安全防护</li>
<li>IPS在线部署、主动防御、实时阻断攻击</li>
</ul>
<p><img src="/images/ips/ips-notepad/IPS%E3%80%81IDS%E3%80%81%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="IPS、IDS、防火墙"></p>
<h5 id="⭐-技术介绍"><a href="#⭐-技术介绍" class="headerlink" title="⭐ 技术介绍"></a>⭐ 技术介绍</h5><ul>
<li>Profile-Based Intrustion Detection<ul>
<li>特点：定义正常流量，其余均为非法流量</li>
<li>优点：黑客很难判断什么是合法流量，能够发现最新的还没被公布的攻击</li>
<li>缺点：很难规定正常流量，告警很难理解，错误误报很多</li>
<li>产品：主机IPS（CSA）</li>
</ul>
</li>
<li>Signature-Based Intrusion Detection<ul>
<li>特点：通过Signaure（特性代码）匹配攻击</li>
<li>优点：架构很容易，告警很容易理解，能够自定义Sig</li>
<li>缺点：不能检测未被公布的攻击，需要经常升级，需要Cache流量</li>
<li>产品：网络IPS（4215，4240….）</li>
</ul>
</li>
<li>Protocol Analysis<ul>
<li>特点：基于RFC或者安全规范监控协议</li>
<li>产品：防火墙的运用层监控</li>
</ul>
</li>
</ul>
<h5 id="⭐-躲避手段"><a href="#⭐-躲避手段" class="headerlink" title="⭐ 躲避手段"></a>⭐ 躲避手段</h5><ul>
<li>Flooding（泛洪攻击）<ul>
<li>逃避手段：制造大量超出IPS处理能力的流量，掩护非法流量穿越IPS</li>
</ul>
</li>
<li>Frametation（分片）<ul>
<li>逃避手段：制造大量分片耗尽IPS缓存，实施对IPS的DoS，掩护非法分片流量</li>
</ul>
</li>
<li>Encryption（加密）<ul>
<li>逃避手段：加密攻击流量</li>
<li>例如：通过木马控制客户端发起加密流量到攻击者</li>
</ul>
</li>
<li>Obfuscation（困惑）<ul>
<li>逃避手段：攻击者通过不同的编码方式来逃避IPS检测</li>
<li>例如：@法#轮￥功%</li>
</ul>
</li>
</ul>
<h5 id="Cisco-4240"><a href="#Cisco-4240" class="headerlink" title="Cisco 4240"></a>Cisco 4240</h5><ul>
<li>Cisco 4240正面板<ul>
<li>Cisco的IPS与防火墙外观相同，仅简介不同</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/Cisco%E6%AD%A3%E9%9D%A2%E6%9D%BF.png" alt="Cisco正面板"></p>
<ul>
<li>Cisco 4240背面板<ul>
<li>Command and Control Interface<ul>
<li>描述：带外网管口（插网线）</li>
<li>功能：需要配置IP地址，有路由能力，管理流量（https/ssh/telnet）从此接口进入</li>
</ul>
</li>
<li>Console and AUX port<ul>
<li>描述：Console AUX管理接口（插Console线）</li>
<li>功能：CLI带外管理（命令行）</li>
</ul>
</li>
<li>Monitoring（Sensor）Interfaces<ul>
<li>描述：监控接口（插网线）</li>
<li>功能：不能配置IP地址，没有路由能力，监控流量从此接口进入</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/Cisco%E8%83%8C%E9%9D%A2%E6%9D%BF.png" alt="Cisco背面板"></p>
<h5 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h5><ul>
<li>GNS3 0.8.6（傻瓜式安装）<ul>
<li>需要安装Winpcap 4.1.3</li>
<li>需要安装Wireshark 1.10.2（32bit）</li>
<li>导入ISO<ul>
<li>Edit → IOS and Hypervisors → Image file → bin文件 → save</li>
<li>导入路径不能有中文字符</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/GNS3%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png" alt="GNS3配置成功"></p>
<p><img src="/images/ips/ips-notepad/GNS%E5%AF%BC%E5%85%A5%E9%95%9C%E5%83%8F%E6%88%90%E5%8A%9F.png" alt="GNS导入镜像成功"></p>
<ul>
<li>SecureCRT_6.5.3.490（傻瓜式安装）<ul>
<li>可以自定义安装，不占C盘资源空间</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/SecureCRT%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png" alt="SecureCRT配置成功"> </p>
<ul>
<li>IPS-4240<ul>
<li>导入ova文件，设置新虚拟机位置<ul>
<li>账号：cisco</li>
<li>密码：ciscoips123</li>
</ul>
</li>
<li>网络适配器：自定义（VMnet8(NAT模式)）</li>
<li>网络适配器2：自定义VMnet2</li>
<li>网络适配器3：自定义VMnet3</li>
<li>网络适配器4：桥接模式（自动）</li>
<li>网络适配器5：桥接模式（自动）</li>
<li>新增串行端口：使用命名的管道:\.\pipe\842-1</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IPS%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png" alt="IPS配置成功"></p>
<ul>
<li>Piped.exe（用MFC开发）<ul>
<li>模拟IPS串行端口</li>
<li>输入Pipe和自定义Port</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/Piped%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png" alt="Piped配置成功"></p>
<ul>
<li>SecureCRT连接<ul>
<li>新建快速连接<ul>
<li>协议：Telnet</li>
<li>主机名：127.0.0.1</li>
<li>端口：在Piped自定义的Port</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/SecureCRT%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png" alt="SecureCRT连接成功"></p>
<h3 id="0X01-IPS环境搭建"><a href="#0X01-IPS环境搭建" class="headerlink" title="0X01 IPS环境搭建"></a>0X01 IPS环境搭建</h3><h5 id="选择GNS"><a href="#选择GNS" class="headerlink" title="选择GNS"></a>选择GNS</h5><ul>
<li>GNS可以导入外部模块，但PT不行</li>
</ul>
<h5 id="初始化IPS"><a href="#初始化IPS" class="headerlink" title="初始化IPS"></a>初始化IPS</h5><ul>
<li>setup<ul>
<li>Enter host name:IPS</li>
<li>Enter IP Interface:设置VM8的IP地址以及网关</li>
<li>▲ 其他默认</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IPS-4240%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE.png" alt="IPS-4240初始化配置"></p>
<p><img src="/images/ips/ips-notepad/IPS-4240%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png" alt="IPS-4240初始化配置成功"></p>
<h5 id="IME"><a href="#IME" class="headerlink" title="IME"></a>IME</h5><ul>
<li>安装IME对密码有要求，弱口令无法登陆</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME%E8%AE%BE%E7%BD%AE%E7%AE%80%E5%8D%95%E5%AF%86%E7%A0%81%E6%8A%A5%E9%94%99.png" alt="IME设置简单密码报错"></p>
<ul>
<li>配置IME<ul>
<li>添加IPS的IP地址以及端口</li>
<li>添加IPS的账号密码</li>
<li>▲ 配置的时候，需要设置Configuration User和Event Subscription User</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME%E6%B7%BB%E5%8A%A0%E8%AE%BE%E5%A4%87.png" alt="IME添加设备"></p>
<p><img src="/images/ips/ips-notepad/IME%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png" alt="IME配置成功"></p>
<p><img src="/images/ips/ips-notepad/IPS-Configuration.png" alt="IPS-Configuration"></p>
<h3 id="0X02-IME–IPS使用"><a href="#0X02-IME–IPS使用" class="headerlink" title="0X02 IME–IPS使用"></a>0X02 IME–IPS使用</h3><h5 id="常用的网络安全设备"><a href="#常用的网络安全设备" class="headerlink" title="常用的网络安全设备"></a>常用的网络安全设备</h5><ul>
<li>防火墙</li>
<li>VPN（虚拟专用网络）</li>
<li>IDS和IPS</li>
<li>杀毒软件</li>
<li>UTM（威胁管理）</li>
</ul>
<h5 id="IPS-gt-Sensor-Setup"><a href="#IPS-gt-Sensor-Setup" class="headerlink" title="IPS -&gt; Sensor Setup"></a>IPS -&gt; Sensor Setup</h5><ul>
<li>Network<ul>
<li>Allow Password Recovery：这个选项默认是开启的。用于如果忘记IPS的登陆密码。可以在IPS启机过程当中使用密码恢复功能。把IPS的密码恢复成默认的cisco.注意。这个恢复。不会影响到IPS的一些相关配置。IPS默认是不开启telnet功能的。可以通过这个面板开启。</li>
<li>LOGIN Banner：用于在登陆IPS的时候，弹出相关告警。</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS--Network.png" alt="IME--IPS--Network"></p>
<p><img src="/images/ips/ips-notepad/IME--IPS--Login-Banner.png" alt="IME--IPS--Login-Banner"></p>
<ul>
<li>Allowed Host/Networks：用于限制哪个台设备，或者哪个网段。可以网管这台IPS。</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS--Permit.png" alt="IME--IPS--Permit"></p>
<ul>
<li>Time</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS--Time.png" alt="IME--IPS--Time"></p>
<ul>
<li>Authentication：用于管理IPS用户帐号密码，并为某个帐号授权相应权限</li>
<li>权限等级<ul>
<li>Administrator：管理员权限。对于IPS管理和配置来说。是最高权限。可以对IPS的基本网络，网络管理，接口管理，策略管理，日志读取进行配置</li>
<li>Operator：操作者权限。可以对于IPS的策略，日志读取进行配置</li>
<li>Viewer：查看者权限。紧紧只能对IPS的日志进行读取</li>
<li>Service：IPS底层权限。IPS底层修改时使用（通过Console口连接）</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS--Authentication.png" alt="IME--IPS--Authentication"></p>
<h5 id="IPS出入流量策略"><a href="#IPS出入流量策略" class="headerlink" title="IPS出入流量策略"></a>IPS出入流量策略</h5><ul>
<li><p>Outbound流量</p>
<ul>
<li>IPS对于这种流量不做任何限制。也就是说。只要是路由存在的情况下。并且在IPS去往某个目的IP的过程中，没有策略拒绝这股流量的话。IPS可以抵达网络中任何一个IP主机。</li>
<li>▲ IPS进行这种通信的时候。使用的是管理接口（M口）</li>
</ul>
</li>
<li><p>Inbound流量允许</p>
<ul>
<li>已建立连接的流量（对IPS的一个回程报文，始发者是IPS）</li>
<li>源自于NTP服务器的数据包</li>
<li>Allowed Host所放行的流量。Allowed Host类似于ACL应用在VTY链路。添加条目的时候，可以针对一个主机或者一个子网</li>
</ul>
</li>
</ul>
<h5 id="IPS-gt-Interface"><a href="#IPS-gt-Interface" class="headerlink" title="IPS -&gt; Interface"></a>IPS -&gt; Interface</h5><ul>
<li>Bypass<ul>
<li>用于修改</li>
<li>三种模式<ul>
<li>AUTO：自动模式。当IPS检测引擎发生故障的时候，对于流量的监控，自动关闭。直接放行流量（默认形式）</li>
<li>ON：开启旁路模式。IPS对流量的监控直接关闭。对任何来到IPS的流量都不做检测匹配，直接放行</li>
<li>OFF：关闭旁路模式。IPS对于流量的监控是必须的。如果发生检测引擎发送故障，而IPS又使用了这个模式，那么就会对网络造成一定的影响</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS--Bypass.png" alt="IME--IPS--Bypass"></p>
<h5 id="IPS-gt-Policies"><a href="#IPS-gt-Policies" class="headerlink" title="IPS -&gt; Policies"></a>IPS -&gt; Policies</h5><ul>
<li>Signatures：签名。攻击特征码。IPS匹配攻击流量的关键配置。对于网络中，形形色色各种流量。都是通过Sig去配置匹配指定的一些特殊流量</li>
<li>可以针对某一条sig进行配置：<br>动作，匹配参数，enable状态，退休状态。针对某条sig.进行克隆，编辑。删除。导出。等等一系列配置</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS--Sig%E7%89%B9%E5%BE%81%E7%A0%81.png" alt="IME--IPS--Sig特征码"></p>
<ul>
<li>VS：虚拟传感器。可以理解为一个虚拟的IPS。一个VS内，独立关联一个接口。独立的Sig攻击库，独立的规则，独立策略。多个VS之间，关联不同的接口。使用不同的策略。针对不同流量，实现不同的动作。VS之间相互不影响（从IPS软件版本6.X开始）<ul>
<li>描述</li>
<li>关联相关的接口</li>
<li>关联相关的SIG攻击库</li>
<li>关联相关的规则</li>
<li>▲ 可以使用一个策略配置在不同的VS里面。唯独！接口不能够重复配置在其他的VS</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS--VS1.png" alt="IME--IPS--VS1"></p>
<ul>
<li>Edit Actions：编辑针对某个Sig被触发后所执行的动作<ul>
<li>告警和日志行为<ul>
<li>Produce Alert–产生告警</li>
<li>Produce Verbose Alert–产生冗长告警。把触发这个Sig的数据抓包，并附在告警里</li>
<li>Log Attacker Packets–Log攻击者。对触发这条Sig的数据报文的源IP地址，在后面的一定时间内（可修改）。对其进行抓包，停止后，可以通过IDM下载这个抓包文件。使用抓包攻击打开，进行数据的分析 —-单一攻击源</li>
<li>Log Victim Packets–Log受害者。对触发这条Sig的数据报文的目的IP地址，在后面的一定时间内（可修改）对其进行抓包。停止后 —-多攻击源</li>
<li>Log Pair Packets–Log pair。对触发这条Sig的数据报文的指定的源和目的地址IP地址，在后面的一定时间内（可修改）。对其进行抓包。停止后，可以通过IDM下载这个抓包文件。使用抓包工具打开，进行数据的分析</li>
<li>Request SNMP Trap–SNMP Trap。需要指定SNMP服务器。把触发这条Sig的告警上传到指定服务器</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS--Edit-Actions.png" alt="IME--IPS--Edit-Actions"></p>
<h3 id="0X03-IME–IDS实验"><a href="#0X03-IME–IDS实验" class="headerlink" title="0X03 IME–IDS实验"></a>0X03 IME–IDS实验</h3><h5 id="IDS模拟实验"><a href="#IDS模拟实验" class="headerlink" title="IDS模拟实验"></a>IDS模拟实验</h5><ul>
<li>R1：Router C3700</li>
<li>R1：Router C3700</li>
<li>IDS：IPS-4240</li>
<li>SW：EtherSwitch router</li>
<li>▲ 2020.03.09 虚拟机IPS-4240的虚拟网卡VMware1和VMware2需要开启主机连接，且若在GNS3中无出现此两个网卡，可重启计算机，即可抓到这两个网卡</li>
</ul>
<p><img src="/images/ips/ips-notepad/IPS-4240%E5%BC%80%E5%90%AF%E7%9A%84%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5.png" alt="IPS-4240开启的主机连接"></p>
<p><img src="/images/ips/ips-notepad/IDS%E6%9D%82%E5%90%88%E6%A8%A1%E5%BC%8F%E6%8A%A5%E8%AD%A6%E6%8B%93%E6%89%91%E5%9B%BE.png" alt="IDS杂合模式报警拓扑图"></p>
<h5 id="IDS：IPS-4240"><a href="#IDS：IPS-4240" class="headerlink" title="IDS：IPS-4240"></a>IDS：IPS-4240</h5><ul>
<li>改变外形：右键 -&gt; Change Symbol -&gt; ids</li>
<li>修改名字：右键 -&gt; Change the hostname -&gt; IDS</li>
<li>增加监控网卡：Configure -&gt; NIO Ethernet -&gt; Add VMnet1</li>
</ul>
<h5 id="R1和R2"><a href="#R1和R2" class="headerlink" title="R1和R2"></a>R1和R2</h5><ul>
<li>启动，降低系统资源消耗：右键 -&gt; Idle PC -&gt; 选取带*号的参数设备</li>
<li>配置R1<ul>
<li>conf t</li>
<li>interface f0/1</li>
<li>ip add 10.1.1.1 255.255.255.0</li>
<li>no sh</li>
</ul>
</li>
<li>配置R2<ul>
<li>conf t</li>
<li>interface f0/1</li>
<li>ip add 10.1.1.2 255.255.255.0</li>
<li>no sh</li>
</ul>
</li>
<li>连通性：R1 -&gt; do ping 10.1.1.2 -&gt; R2是否联通</li>
</ul>
<h5 id="SW：EtherSwitch-router"><a href="#SW：EtherSwitch-router" class="headerlink" title="SW：EtherSwitch router"></a>SW：EtherSwitch router</h5><ul>
<li>启动，降低系统资源消耗：右键 -&gt; Idle PC -&gt; 选取带*号的参数设备</li>
<li>修改名字：右键 -&gt; Change the hostname -&gt; SW</li>
<li>增加接口：右键 -&gt; Slots -&gt; 增加一个NM-16ESW</li>
</ul>
<h5 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h5><ul>
<li>R1(f 1/0)-&gt; SW(f 1/1)</li>
<li>R2(f 1/0)-&gt; SW(f 1/2)</li>
<li>IDS -&gt; SW(f 1/15)</li>
<li>连通性：R1 -&gt; ping 10.1.1.2 -&gt; R2是否连通</li>
</ul>
<h5 id="SPAN配置"><a href="#SPAN配置" class="headerlink" title="SPAN配置"></a>SPAN配置</h5><ul>
<li>SW：EtherSwitch router<ul>
<li>monitor session 1 source interface f1/1 rx  //R1</li>
<li>monitor session 1 destination interface f1/15  //IDS</li>
</ul>
</li>
</ul>
<h5 id="入侵检测"><a href="#入侵检测" class="headerlink" title="入侵检测"></a>入侵检测</h5><ul>
<li>▲ 所有的步骤都需要进行Apply</li>
<li>IME启动IPS</li>
<li>开启Interface接口<ul>
<li>Configuration -&gt; Interface -&gt; GigabitEthernet 0/0 -&gt; Edit -&gt; enable</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IDS%E5%BC%80%E5%90%AFInterface%E6%8E%A5%E5%8F%A3.png" alt="IME--IDS开启Interface接口"></p>
<ul>
<li>绑定病毒特征识别库Sig0<ul>
<li>Configuration -&gt; Policies -&gt; vs0 -&gt; Edit -&gt; GigabitEthernet 0/0</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IDS%E7%BB%91%E5%AE%9A%E7%97%85%E6%AF%92%E7%89%B9%E5%BE%81%E8%AF%86%E5%88%AB%E5%BA%93Sig0.png" alt="IME--IDS绑定病毒特征识别库Sig0"></p>
<ul>
<li>配置病毒特征识别库Sig0<ul>
<li>Sig0 -&gt; OS -&gt; 2004(过滤) -&gt; Change status To -&gt; Active</li>
<li>Sig0 -&gt; OS -&gt; 2004(过滤) -&gt; Enable</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IDS%E9%85%8D%E7%BD%AE%E7%97%85%E6%AF%92%E7%89%B9%E5%BE%81%E8%AF%86%E5%88%AB%E5%BA%93Sig0.png" alt="IME--IDS配置病毒特征识别库Sig0"></p>
<ul>
<li>监控IDS-ICMP事件<ul>
<li>Configuration -&gt; Sensor Monitoring -&gt; View</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IDS%E7%9B%91%E6%8E%A7IDS-ICMP%E4%BA%8B%E4%BB%B6.png" alt="IME--IDS监控IDS-ICMP事件"></p>
<ul>
<li>R1向R2发生ICMP Echo Requset的Ping包，查看IME–IPS的Event Viewer有无报警日志</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IDS%E7%9B%91%E6%8E%A7IDS%E4%BA%8B%E4%BB%B6.png" alt="IME--IDS监控IDS事件"> </p>
<h3 id="0X04-IME–IPS实验"><a href="#0X04-IME–IPS实验" class="headerlink" title="0X04 IME–IPS实验"></a>0X04 IME–IPS实验</h3><h5 id="IPS模拟实验"><a href="#IPS模拟实验" class="headerlink" title="IPS模拟实验"></a>IPS模拟实验</h5><ul>
<li>R1：Router C3700</li>
<li>R1：Router C3700</li>
<li>IDS：IPS-4240</li>
<li>SW：以太网交换机</li>
<li>▲ 2020.03.09 虚拟机IPS-4240的虚拟网卡VMware1和VMware2需要开启主机连接，且若在GNS3中无出现此两个网卡，可重启计算机，即可抓到这两个网卡</li>
</ul>
<p><img src="/images/ips/ips-notepad/IPS-4240%E5%BC%80%E5%90%AF%E7%9A%84%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5.png" alt="IPS-4240开启的主机连接"></p>
<p><img src="/images/ips/ips-notepad/IPS%E5%9C%A8%E7%BA%BF%E6%A8%A1%E5%BC%8F%E6%8A%A5%E8%AD%A6%E6%8B%93%E6%89%91%E5%9B%BE.png" alt="IPS在线模式报警拓扑图"></p>
<h5 id="IPS：IPS-4240"><a href="#IPS：IPS-4240" class="headerlink" title="IPS：IPS-4240"></a>IPS：IPS-4240</h5><ul>
<li>改变外形：右键 -&gt; Change Symbol -&gt; ids</li>
<li>修改名字：右键 -&gt; Change the hostname -&gt; IDS</li>
<li>增加监控网卡：Configure -&gt; NIO Ethernet -&gt; Add VMnet1</li>
<li>增加监控网卡：Configure -&gt; NIO Ethernet -&gt; Add VMnet2</li>
</ul>
<h5 id="R1和R2-1"><a href="#R1和R2-1" class="headerlink" title="R1和R2"></a>R1和R2</h5><ul>
<li>启动，降低系统资源消耗：右键 -&gt; Idle PC -&gt; 选取带*号的参数设备</li>
<li>配置R1<ul>
<li>conf t</li>
<li>interface f0/1</li>
<li>ip add 10.1.1.1 255.255.255.0</li>
<li>no sh</li>
</ul>
</li>
<li>配置R2<ul>
<li>conf t</li>
<li>interface f0/1</li>
<li>ip add 10.1.1.2 255.255.255.0</li>
<li>no sh</li>
</ul>
</li>
<li>连通性：R1 -&gt; do ping 10.1.1.2 -&gt; R2是否联通</li>
</ul>
<h5 id="SW：Ethernet-switch"><a href="#SW：Ethernet-switch" class="headerlink" title="SW：Ethernet switch"></a>SW：Ethernet switch</h5><ul>
<li>启动，降低系统资源消耗：右键 -&gt; Idle PC -&gt; 选取带*号的参数设备</li>
<li>修改名字：右键 -&gt; Change the hostname -&gt; SW</li>
<li>增加接口：右键 -&gt; Slots -&gt; 增加一个NM-16ESW</li>
</ul>
<h5 id="测试连通性-1"><a href="#测试连通性-1" class="headerlink" title="测试连通性"></a>测试连通性</h5><ul>
<li>R1(f 1/0)-&gt; SW(1)</li>
<li>R2(f 1/0)-&gt; SW(2)</li>
<li>IDS -&gt; SW(3)</li>
<li>IDS -&gt; SW(4)</li>
</ul>
<h5 id="拓扑配置"><a href="#拓扑配置" class="headerlink" title="拓扑配置"></a>拓扑配置</h5><ul>
<li>▲ 所有的步骤都需要进行Apply</li>
<li>IME中配置接口对（mypair）<ul>
<li>Configuration -&gt; Interface Pairs -&gt; Add -&gt; 选取一对接口 -&gt; 开启</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS%E9%85%8D%E7%BD%AEmypair.png" alt="IME--IPS配置mypair"></p>
<ul>
<li>绑定病毒特征识别库Sig0<ul>
<li>Configuration -&gt; Policies -&gt; vs0 -&gt; Edit -&gt; mypair</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS%E7%BB%91%E5%AE%9A%E7%97%85%E6%AF%92%E7%89%B9%E5%BE%81%E8%AF%86%E5%88%AB%E5%BA%93Sig0.png" alt="IME--IPS绑定病毒特征识别库Sig0"></p>
<ul>
<li><p>划分VLAN</p>
<ul>
<li>SW<ul>
<li>端口1、3属于VLAN2</li>
<li>端口2、4属于VLAN3</li>
</ul>
</li>
</ul>
</li>
<li><p>连通性：R1 -&gt; ping 10.1.1.2 -&gt; R2是否连通</p>
</li>
</ul>
<h5 id="入侵检测-1"><a href="#入侵检测-1" class="headerlink" title="入侵检测"></a>入侵检测</h5><ul>
<li>▲ 所有的步骤都需要进行Apply</li>
<li>配置病毒特征识别库Sig0<ul>
<li>Sig0 -&gt; OS -&gt; 2004(过滤) -&gt; Change status To -&gt; Active</li>
<li>Sig0 -&gt; OS -&gt; 2004(过滤) -&gt; Enable</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS%E9%85%8D%E7%BD%AE%E7%97%85%E6%AF%92%E7%89%B9%E5%BE%81%E8%AF%86%E5%88%AB%E5%BA%93Sig0.png" alt="IME--IPS配置病毒特征识别库Sig0"></p>
<ul>
<li>监控IPS-ICMP事件<ul>
<li>Configuration -&gt; Sensor Monitoring -&gt; View</li>
</ul>
</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS%E7%9B%91%E6%8E%A7IPS-ICMP%E4%BA%8B%E4%BB%B6.png" alt="IME--IPS监控IPS-ICMP事件"></p>
<ul>
<li>R1向R2发生ICMP Echo Requset的Ping包，查看IME–IPS的Event Viewer有无报警日志</li>
</ul>
<p><img src="/images/ips/ips-notepad/IME--IPS%E7%9B%91%E6%8E%A7IPS%E4%BA%8B%E4%BB%B6.png" alt="IME--IPS监控IPS事件"> </p>
]]></content>
      <categories>
        <category>IPS</category>
      </categories>
  </entry>
  <entry>
    <title>搭建wamp和域名服务</title>
    <url>/2020/07/12/wamp_dns/</url>
    <content><![CDATA[<hr>
<h2 id="搭建wamp和域名服务"><a href="#搭建wamp和域名服务" class="headerlink" title="搭建wamp和域名服务"></a>搭建wamp和域名服务</h2><ul>
<li>WAMP环境</li>
<li>安装Apache</li>
<li>安装PHP</li>
<li>MySQL安装</li>
<li>搭建域名</li>
<li>搭建虚拟主机<ul>
<li>基于IP的虚拟主机</li>
<li>基于端口的虚拟主机</li>
<li>基于域名的虚拟主机</li>
<li>注意</li>
</ul>
</li>
</ul>
<h3 id="0X00-WAMP环境"><a href="#0X00-WAMP环境" class="headerlink" title="0X00 WAMP环境"></a>0X00 WAMP环境</h3><ul>
<li>环境搭建路径不能为中文，可以集中在一个sever目录下</li>
<li>Apache：httpd-2.4.41-o111c-x64-vc15-r2<ul>
<li>2.4.41–版本号</li>
<li>x64–对应系统平台</li>
<li>vc15–编译平台</li>
</ul>
</li>
<li>PHP：php-7.4.3-Win32-vc15-x64<ul>
<li>x64–对应系统平台</li>
<li>7.4.3–版本号</li>
<li>vc15–编译平台</li>
</ul>
</li>
<li>MySQL：mysql5.5<ul>
<li>5.5–版本号</li>
</ul>
</li>
</ul>
<p><img src="/images/php/php-notepad/server%E7%9B%AE%E5%BD%95.png" alt="server目录"></p>
<h3 id="0X01-安装Apache"><a href="#0X01-安装Apache" class="headerlink" title="0X01 安装Apache"></a>0X01 安装Apache</h3><ul>
<li>Apache httpd：<a href="https://www.apachehaus.com/cgi-bin/download.plx" target="_blank" rel="noopener">https://www.apachehaus.com/cgi-bin/download.plx</a><ul>
<li>根据系统版本选择对应的Apache httpd服务</li>
<li>▲ 从Apache官网下载相应的源码，现在比较难以找到msi安装包</li>
</ul>
</li>
<li>安装<ul>
<li>▲ 目录路径不可为中文</li>
<li>将文件解压到新建的server目录，命名为Apache</li>
<li>测试服务：cmd -&gt; httpd.exe -t<ul>
<li>新解压的Apache服务会报错误，需要Define SRVROOT，更改为Apache的绝对路径</li>
<li>测试成功：Syntax OK</li>
</ul>
</li>
<li>安装：cmd -&gt; httpd.exe -K install<ul>
<li>若无报错信息，则可以在Apache Service Monitor启动Apache服务</li>
</ul>
</li>
<li>查看使用的模块：cmd -&gt; httpd.exe -M<ul>
<li><static>：静态加载，Apache启动就加载好，可以直接使用</li>
<li><shared>：动态加载，在使用到的时候才会加载</li>
</ul>
</li>
</ul>
</li>
<li>目录说明<ul>
<li>bin/cgi-bin：windows下的一些可执行文件</li>
<li>conf：配置文件目录</li>
<li>htdocs：Apache默认的主机地址（网站根目录）</li>
<li>modules：Apache的功能化模块</li>
</ul>
</li>
<li>配置站点<ul>
<li>▲ 配置文件：httpd.conf -&gt; 自定义SRVROOT</li>
<li>网站文件夹所在位置：DocumentRoot/ServerRoot “${SRVROOT}/htdocs”</li>
<li>使用名字访问网站：ServerName localhost</li>
<li>端口监听：Listen 80</li>
</ul>
</li>
<li>⭐ 每次动到配置文件，可通过httpd.exe -t去测试是否配置编译错误</li>
<li>▲ 凡是涉及到Apache配置文件的修改，都需要重启Apache才能生效</li>
<li>▲ 实现DNS域名解析：修改hosts文件 -&gt; 127.0.0.1  localhost</li>
<li>▲ 可在系统环境变量的PATH中加载httpd.exe的路径</li>
<li>浏览器访问localhost，看是否能成功访问到</li>
</ul>
<p><img src="/images/php/php-notepad/Apache%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="Apache安装成功"></p>
<h3 id="0X02-安装PHP"><a href="#0X02-安装PHP" class="headerlink" title="0X02 安装PHP"></a>0X02 安装PHP</h3><ul>
<li>PHP：<a href="https://windows.php.net/download#php-7.4" target="_blank" rel="noopener">https://windows.php.net/download#php-7.4</a><ul>
<li>根据系统版本选择对应的PHP服务</li>
<li>根据Apache选择对应的编译环境</li>
<li>选择Thread Safe线程安全的形式</li>
</ul>
</li>
<li>安装<ul>
<li>▲ 目录路径不可为中文</li>
<li>将文件解压到新建的server目录，命名为PHP7.4.3</li>
<li>可通过php.exe运行命令来指定要解析的PHP脚本 -&gt; php.exe  -f  PHP文件所在路径的index.php文件 -&gt; hello world</li>
</ul>
</li>
<li>目录说明<ul>
<li>ext：扩展包-&gt;PHP很多功能是通过加载扩展来实现</li>
<li>php7apache2_4.dll：Apache支持包</li>
<li>php.exe：PHP解释器</li>
</ul>
</li>
<li>配置Apache加载PHP模块<ul>
<li>▲ 配置Apache文件：httpd.conf</li>
<li>Apache加载PHP模块：在Apache的主配置文件中加载对应的PHP提供的模块<ul>
<li>LoadModule php7_module PHP所提供的模块链接所在路径</li>
</ul>
</li>
<li>Apache分配工作给PHP模块：如果是PHP代码就交给PHP处理–文件后缀判断<ul>
<li>AddType application/x-httpd-php .php</li>
</ul>
</li>
<li>将PHP的配置文件加载到Apache配置文件中<ul>
<li>PHPIniDir php.ini所在路径</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/php/php-notepad/%E9%85%8D%E7%BD%AEApache%E5%8A%A0%E8%BD%BDPHP%E6%A8%A1%E5%9D%97.png" alt="配置Apache加载PHP模块"></p>
<ul>
<li>配置文件<ul>
<li>php.ini文件默认是不存在的，是以development存在，复制一份，修改命名为php.ini</li>
</ul>
</li>
<li>测试<ul>
<li>新建一个index.php文件</li>
<li>浏览器访问localhost/index.php</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/php/php-notepad/PHP%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="PHP安装成功"></p>
<h3 id="0X03-MySQL安装"><a href="#0X03-MySQL安装" class="headerlink" title="0X03 MySQL安装"></a>0X03 MySQL安装</h3><ul>
<li>MySQL：<a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">https://www.mysql.com/downloads/</a><ul>
<li>根据系统版本选择对应的MySQL服务</li>
<li>安装mysql一般安装5.x版本，7.x版本为一定程度的阉割版</li>
</ul>
</li>
<li>安装<ul>
<li>Custome：自定义安装（选择安装路径）<ul>
<li>MySQL Server -&gt; server/mysql</li>
<li>Server data files -&gt; server/mysql/data</li>
</ul>
</li>
<li>Launch the MySQL Instance Configuration Wizard：配置<ul>
<li>Please select a configuration -&gt; Detailed Configuration：详细配置</li>
<li>Please select a server type -&gt; Developer Machine：开发环境</li>
<li>Please select the database usage -&gt; Multifunctional Database：多功能</li>
<li>Please set the approximate number of cocurrent connections to the server -&gt; Manual Setting(15):并发设置</li>
<li>Please set the networking options<ul>
<li>Enable TCP/IP Networking  -&gt; 允许TCP/IP协议访问<ul>
<li>Prot Number -&gt; 3306</li>
<li>Add firewall exception for this port -&gt; 防火墙通过</li>
</ul>
</li>
<li>Enable Strict Mode -&gt; 使用严格模式</li>
</ul>
</li>
<li>Please select the default set -&gt; Manual Selected Default Character Set / Collation:字符集设定 -&gt; utf8</li>
<li>Please set the Windows options <ul>
<li>Install As Windows Service：服务安装<ul>
<li>Service Name：MySQL</li>
<li>Launch the MySQL Server automatically：随系统启动</li>
</ul>
</li>
<li>Include Bin Directory in Windows PATH：讲MySQL加到系统路径</li>
</ul>
</li>
<li>Please set the security options<ul>
<li>Modify security settings<ul>
<li>New root password -&gt; root</li>
<li>Confirm -&gt; root</li>
<li>Enable root access from remote machines：允许远程访问</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/php/php-notepad/MySQL%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="MySQL安装成功"></p>
<ul>
<li>目录说明<ul>
<li>bin：执行文件夹<ul>
<li>mysql.exe：访问MySQL服务器的客户端</li>
<li>mysqld.exe：MySQL服务</li>
<li>mysqldump.exe：MySQL的备份软件客户端</li>
</ul>
</li>
<li>data：数据存储文件夹</li>
<li>lib：核心文件夹</li>
<li>my.ini：配置文件</li>
</ul>
</li>
<li>测试mysql服务<ul>
<li>cmd -&gt; mysql -u root -p</li>
<li>参数<ul>
<li>-h：主机地址</li>
<li>-p：端口</li>
<li>-u：用户名</li>
<li>-p：密码</li>
</ul>
</li>
</ul>
</li>
<li>PHP连接MySQL数据库<ul>
<li>▲ 配置php文件：php.ini</li>
<li>PHP的扩展都是在ext文件夹中，需要制定扩展所在路径：extension_dir=”/server/php7.4.3/ext”</li>
<li>开启sqli扩展：extension=mysqli</li>
<li>开启pdo_mysql扩展：extension=pdo_mysql</li>
</ul>
</li>
</ul>
<p><img src="/images/php/php-notepad/PHP%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="PHP连接MySQL数据库"></p>
<ul>
<li>测试PHP连接mysql<ul>
<li>新建一个testmysql.php文件</li>
<li>浏览器访问localhost/testmysql.py，查看是否出现OK！</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $link=mysqli_connect(&apos;localhost&apos;,&apos;root&apos;,&apos;root&apos;);</span><br><span class="line">    if(!$link) echo &quot;Error !&quot;;</span><br><span class="line">    else echo &quot;Ok!&quot;;</span><br><span class="line">    mysqli_close($link);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/php/php-notepad/phpinfo--mysqli.png" alt="phpinfo--mysqli"></p>
<p><img src="/images/php/php-notepad/phpinfo--pdo_mysql.png" alt="phpinfo--pdo_mysql"></p>
<h3 id="0X04-搭建域名"><a href="#0X04-搭建域名" class="headerlink" title="0X04 搭建域名"></a>0X04 搭建域名</h3><ul>
<li>修改hosts文件 -&gt; 127.0.0.1  localhost</li>
</ul>
<h3 id="0X05-搭建虚拟主机"><a href="#0X05-搭建虚拟主机" class="headerlink" title="0X05 搭建虚拟主机"></a>0X05 搭建虚拟主机</h3><ul>
<li>官方解释文档：<a href="http://httpd.apache.org/docs/current/vhosts/" target="_blank" rel="noopener">http://httpd.apache.org/docs/current/vhosts/</a></li>
<li>配置虚拟主机方式<ul>
<li>基于IP</li>
<li>基于主机名</li>
<li>基于端口</li>
</ul>
</li>
<li>实验环境<ul>
<li>在Apache下的htdocs目录中，新建两个目录，test1和test2<ul>
<li>test1目录下1.php（<?php phpinfo(); ?>）</li>
<li>test2目录下2.php（<?php echo "OKKKK" ?>）</li>
<li>▲ 2020.03.05在查询资料的过程中，有遇到test目录可以建立在htdocs的情况，但实操发现不行</li>
</ul>
</li>
<li>本地模拟外网域名，在hosts文件中配置两个测试域名<ul>
<li>127.0.0.1 <a href="http://www.test1mzt.com" target="_blank" rel="noopener">www.test1mzt.com</a></li>
<li>127.0.0.1 <a href="http://www.test2mzt.com" target="_blank" rel="noopener">www.test2mzt.com</a></li>
</ul>
</li>
<li>修改配置（Apache24\conf\httpd.conf）<ul>
<li>#Virtual hosts -&gt; Include conf/extra/httpd-vhosts.conf</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/php/php-notepad/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BAhosts%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE.png" alt="虚拟主机hosts文件设置"></p>
<h5 id="基于IP的虚拟主机"><a href="#基于IP的虚拟主机" class="headerlink" title="基于IP的虚拟主机"></a>基于IP的虚拟主机</h5><ul>
<li>基于IP，一台服务器有多个网卡，每个IP绑定一个站点的方式</li>
<li>▲ 基于IP的方式，写在VirtualHost的IP地址需要可被路由</li>
<li>▲ 在下图，有多种访问方式访问test2下的2.php<ul>
<li>127.0.0.2:80/2.php</li>
<li><a href="http://www.test2mzt.com:80/2.php" target="_blank" rel="noopener">www.test2mzt.com:80/2.php</a></li>
<li><a href="http://www.test2mzt.com/2.php" target="_blank" rel="noopener">www.test2mzt.com/2.php</a></li>
</ul>
</li>
</ul>
<p><img src="/images/php/php-notepad/%E5%9F%BA%E4%BA%8EIP%E7%9A%84%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA.png" alt="基于IP的虚拟主机"></p>
<h5 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h5><ul>
<li>修改配置文件将原来的：Listen 80改为Listen 80 Listen 88</li>
<li>▲ 基于端口的方式，需要在httpd.conf的配置文件中增加监听端口</li>
<li>▲ 在下图，有多种访问方式访问test2下的2.php<ul>
<li>127.0.0.1:88/2.php</li>
<li><a href="http://www.test2mzt.com:88/2.php" target="_blank" rel="noopener">www.test2mzt.com:88/2.php</a></li>
</ul>
</li>
</ul>
<p><img src="/images/php/php-notepad/%E5%9F%BA%E4%BA%8E%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA.png" alt="基于端口的虚拟主机"></p>
<h5 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h5><ul>
<li>基于主机名也就是基于域名方式访问，每个IP多个站点</li>
<li>▲ 基于域名的方式，需要在hosts文件中指定域名</li>
<li>▲ 在下图，有多种访问方式访问test2下的2.php<ul>
<li>127.0.0.1/2.php</li>
<li><a href="http://www.test2mzt.com/2.php" target="_blank" rel="noopener">www.test2mzt.com/2.php</a></li>
</ul>
</li>
</ul>
<p><img src="/images/php/php-notepad/%E5%9F%BA%E4%BA%8E%E5%9F%9F%E5%90%8D%E7%9A%84%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA.png" alt="基于域名的虚拟主机"></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul>
<li><Directory>目录报错<ul>
<li>▲ 2020.03.05 Apache启动报Invalid command ‘order’, perhaps misspelled or defined by a module not included的错误<ul>
<li>Apache2.4以上，做了修改</li>
<li>在LoadMoudle中，需要通过access_compat_module modules/mod_access_compat.so和actions_module modules/mod_actions.so模块，才能使用”Order、Deny、Allow”写配置文件</li>
<li>若不通过access_compat_module modules/mod_access_compat.so更改，可以使用Apache Require命令</li>
</ul>
</li>
</ul>
</li>
<li>需要给当前设定的站点（目录）访问权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &apos;站点目录&apos;&gt;</span><br><span class="line">    #设定方式：代表匹配权限的顺序</span><br><span class="line">    Order Deny,Allow    //没有顺序关系：实际顺序有意义</span><br><span class="line">    #限定范围：按照顺序执行</span><br><span class="line">    Deny from 指定的范围</span><br><span class="line">    Allow from 指定范围/all</span><br><span class="line"></span><br><span class="line">    #列表显示（若无指定具体访问文件或访问文件夹）</span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line"></span><br><span class="line">    #指定默认访问文件</span><br><span class="line">    Directory Indexes FollowSymLinks</span><br><span class="line"></span><br><span class="line">    #指定默认访问文件</span><br><span class="line">    DirectoryIndex index.html index.php</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>▲ 一旦启用虚拟主机配置文件，那么默认的主机地址localhost就不再生效，如果想要生效就要为localhost增加单独的虚拟主机</li>
<li>▲ 如果说网站中整个网站根目录允许访问，但是其中还有其他文件夹不允许访问：可以增加多个Directory标签，针对不同的文件夹</li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>php的扩展</title>
    <url>/2020/07/12/php_extension/</url>
    <content><![CDATA[<hr>
<h2 id="php的扩展"><a href="#php的扩展" class="headerlink" title="php的扩展"></a>php的扩展</h2><ul>
<li>CURL扩展</li>
<li>openssl扩展</li>
<li>Redis以及扩展<ul>
<li>Redis For Winodow</li>
<li>Redis For Linux</li>
<li>Redis操作手册</li>
</ul>
</li>
</ul>
<h3 id="0X00-CURL扩展"><a href="#0X00-CURL扩展" class="headerlink" title="0X00 CURL扩展"></a>0X00 CURL扩展</h3><ul>
<li>▲ 2020.03.15 网上看到了很多关于Window环境开启curl的方法，但都存在一定问题</li>
<li>php开启扩展（php.ini）<ul>
<li>extension=curl</li>
</ul>
</li>
<li>▲ curl加载：找到对应php目录下libssh2.dll文件，复制到对应apache的bin文件夹下</li>
<li>重启Apache，查看phpinfo，是否有Curl</li>
<li>php_curl_test.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">     var_dump(curl_init());  //输出为 resource(2) of type (curl) </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/php/php_extension/curl_install.png" alt="CURL_install"></p>
<h3 id="0x01-openssl扩展"><a href="#0x01-openssl扩展" class="headerlink" title="0x01 openssl扩展"></a>0x01 openssl扩展</h3><ul>
<li>▲ 对于现在大多数网站来说，都是https模式，爬虫需要开启openssl扩展建立连接</li>
<li>php开启扩展（php.ini文件）<ul>
<li>extension=php_openssl</li>
</ul>
</li>
</ul>
<p><img src="/images/php/php_extension/openssl_install.png" alt="openssl_install"></p>
<h3 id="0X02-Redis以及扩展"><a href="#0X02-Redis以及扩展" class="headerlink" title="0X02 Redis以及扩展"></a>0X02 Redis以及扩展</h3><h5 id="Redis-For-Winodow"><a href="#Redis-For-Winodow" class="headerlink" title="Redis For Winodow"></a>Redis For Winodow</h5><ul>
<li>▲ 2020.03.15 Redis for Window官方已经停止维护</li>
<li>▲ Redis默认端口为6379，默认密码为空密码</li>
<li>Redis废弃函数替换：<a href="https://blog.csdn.net/xchenhao/article/details/97251618" target="_blank" rel="noopener">https://blog.csdn.net/xchenhao/article/details/97251618</a></li>
<li>Redis -&gt; Github的维护仓库：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a></li>
<li>Redis官方文档 -&gt; for window <a href="https://www.redis.com.cn/redis-installation" target="_blank" rel="noopener">https://www.redis.com.cn/redis-installation</a></li>
<li>Redis扩展 -&gt; pecl的维护仓库：<a href="http://pecl.php.net/package/redis" target="_blank" rel="noopener">http://pecl.php.net/package/redis</a></li>
<li>Pecl仓库下载 -&gt; <a href="https://windows.php.net/downloads/pecl/" target="_blank" rel="noopener">https://windows.php.net/downloads/pecl/</a></li>
<li>下载Redis.msi安装文件，下载Redis扩展（对应PHP版本）</li>
<li>拷贝redis的扩展php_redis.dll -&gt; php/ext</li>
<li>php开启扩展（php.ini文件）<ul>
<li>extension=php_redis.dll</li>
</ul>
</li>
<li>重启Apache，查看phpinfo，是否有Redis</li>
<li>window_php_redis_test.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">     $redis = new Redis();                   //redis对象</span><br><span class="line">     $redis-&gt;connect(&quot;127.0.0.1&quot;,&quot;6379&quot;); //连接redis服务器</span><br><span class="line">     $redis-&gt;set(&quot;test&quot;,&quot;Hello World&quot;);      //set字符串值</span><br><span class="line">     echo $redis-&gt;get(&quot;test&quot;);               //获取值</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/php/php_extension/redis_for_window.png" alt="redis_for_windows"></p>
<h5 id="Redis-For-Linux"><a href="#Redis-For-Linux" class="headerlink" title="Redis For Linux"></a>Redis For Linux</h5><ul>
<li>Redis安装：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a> （自安装灵活性较大）</li>
<li>php的redis扩展：<a href="https://github.com/phpredis/phpredis/releases" target="_blank" rel="noopener">https://github.com/phpredis/phpredis/releases</a></li>
<li>安装redis扩展</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar xzf phpredis-xxx.tar.gz</span><br><span class="line">cd phpredis </span><br><span class="line">sudo phpize </span><br><span class="line">sudo ./configure </span><br><span class="line">sudo make </span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<ul>
<li>将modules文件夹的内容复制并粘贴到PHP扩展目录中，并在php.ini中添加以下行<ul>
<li><code>extension = redis.so</code> </li>
</ul>
</li>
<li>linux_php_redis_test.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $redis = new Redis(); </span><br><span class="line">    $redis-&gt;connect(&apos;127.0.0.1&apos;, 6379); </span><br><span class="line">    echo &quot;Server is running: &quot;.$redis-&gt;ping();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/php/php_extension/redis_for_linux.png" alt="redis_for_linux"></p>
<h5 id="Redis操作手册"><a href="#Redis操作手册" class="headerlink" title="Redis操作手册"></a>Redis操作手册</h5><ul>
<li>phpredis：<a href="https://github.com/phpredis/phpredis" target="_blank" rel="noopener">https://github.com/phpredis/phpredis</a></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>php模拟get/post请求</title>
    <url>/2020/07/12/php_get_post_simulation/</url>
    <content><![CDATA[<hr>
<h2 id="php模拟get-post请求"><a href="#php模拟get-post请求" class="headerlink" title="php模拟get/post请求"></a>php模拟get/post请求</h2><ul>
<li>curl<ul>
<li>file_put_contents()函数</li>
<li>curl模拟GET请求</li>
<li>curl模拟POST请求</li>
</ul>
</li>
<li>file_get_contents<ul>
<li>stream_context_create()函数</li>
<li>http_build_query()函数</li>
<li>file_get_contents()函数</li>
<li>模拟GET请求</li>
<li>模拟POST请求</li>
</ul>
</li>
<li>fopen<ul>
<li>stream_get_meta_data()函数</li>
<li>模拟GET请求</li>
</ul>
</li>
<li>fsockopen<ul>
<li>fsockopen()函数</li>
<li>parse_url()函数</li>
<li>模拟GET请求</li>
<li>模拟POST请求</li>
</ul>
</li>
</ul>
<h3 id="0X00-curl"><a href="#0X00-curl" class="headerlink" title="0X00 curl"></a>0X00 curl</h3><ul>
<li>▲ 网上吹嘘curl库的强大，今天用来入门模拟一下GET和POST请求</li>
<li>官方手册：<a href="https://www.php.net/manual/zh/ref.curl.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/ref.curl.php</a></li>
<li>curl功能库简介：<a href="https://www.jb51.net/article/26751.htm" target="_blank" rel="noopener">https://www.jb51.net/article/26751.htm</a></li>
<li>curl基础流程<ul>
<li>curl_init()</li>
<li>curl_setopt()</li>
<li>curl_exec()</li>
<li>curl_close()</li>
</ul>
</li>
<li>▲ 支持多种代理模式（HTTP/FTP/SOCKS4/SOCKS5）</li>
</ul>
<h5 id="file-put-contents-函数"><a href="#file-put-contents-函数" class="headerlink" title="file_put_contents()函数"></a>file_put_contents()函数</h5><ul>
<li>要写入的数据。类型可以是 string，array 或者是 stream 资源</li>
<li>官方手册：<a href="https://www.php.net/manual/zh/function.file-put-contents.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.file-put-contents.php</a></li>
<li>▲ 可结合curl，将流数据，数组或者字符串写入文件</li>
</ul>
<h5 id="curl模拟GET请求"><a href="#curl模拟GET请求" class="headerlink" title="curl模拟GET请求"></a>curl模拟GET请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    header(&apos;Content-type:text/html;charset=utf-8&apos;);</span><br><span class="line">    $header = array();  //头部数组</span><br><span class="line">    $header[] = &apos;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&apos;;</span><br><span class="line">    $header[] = &apos;Cache-Control: no-cache&apos;;</span><br><span class="line">    $header[] = &apos;User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0&apos;;</span><br><span class="line">    $url = &apos;https://www.douban.com&apos;;  //要抓取的url</span><br><span class="line">    $ch = curl_init();  //curl初始化</span><br><span class="line">    $timeout = 15;  //超时时间</span><br><span class="line">    curl_setopt ($ch, CURLOPT_URL, $url);  //设置url</span><br><span class="line">    curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);  //设置显示还是写入字符串，1为显示</span><br><span class="line">    curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);  //设置超时时间</span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);  //关闭SSL点对点验证</span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);  //关闭SSL端对端验证</span><br><span class="line">    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);  //设置请求头</span><br><span class="line">    curl_setopt($ch,　CURLOPT_PROXYTYPE,CURLPROXY_SOCKS5);  //设置代理方式</span><br><span class="line">    curl_setopt($ch, CURLOPT_PROXY, &quot;127.0.0.1:1080&quot;);  //设置代理的服务器</span><br><span class="line">    $file_contents = curl_exec($ch);  //发送curl请求</span><br><span class="line">    curl_close($ch);  //关闭curl请求</span><br><span class="line">    //$file_contents = json_decode($file_contents);  //若接收数据为json数据，解码</span><br><span class="line">    mb_convert_encoding($file_contents,&apos;utf-8&apos;);  //转换字符编码</span><br><span class="line">    $f = fopen(&quot;./1.html&quot;, &quot;a+&quot;);  //打开文件，模式为可写可读</span><br><span class="line">    Fwrite($f,$file_contents);  //写入文件</span><br><span class="line">    Fclose($f);  //关闭文件</span><br><span class="line">    print_r($file_contents);  //输出抓取的信息到屏幕上</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="curl模拟POST请求"><a href="#curl模拟POST请求" class="headerlink" title="curl模拟POST请求"></a>curl模拟POST请求</h5><ul>
<li>test.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    var_dump($_POST);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $post_data = array(</span><br><span class="line">        &apos;name&apos; =&gt; &apos;mzt&apos;,</span><br><span class="line">        &apos;age&apos; =&gt; &apos;21&apos; );  //post数据</span><br><span class="line">    $post_data = http_build_query($post_data);  //url-encode编码数据</span><br><span class="line">    $post_data = json_encode($post_data);  //json编码数据</span><br><span class="line">    $url = &apos;http://localhost/test.php&apos;;  //要抓取的url</span><br><span class="line">    $ch = curl_init();  //curl初始化</span><br><span class="line">    $timeout = 5;  //超时时间</span><br><span class="line">    curl_setopt ($ch, CURLOPT_URL, $url);  //设置url</span><br><span class="line">    curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);  //设置显示还是写入字符串，1为显示</span><br><span class="line">    curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);  //设置超时时间</span><br><span class="line">    curl_setopt($ch, CURLOPT_POST, 1);  //设置发送的方式为post</span><br><span class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);  //设置post的数据</span><br><span class="line">    //curl_setopt($ch, CURLOPT_HTTPHEADER, array(&apos;Content-Type:application/json&apos;));  //json编码设置</span><br><span class="line">    $file_contents = curl_exec($ch);  //发送curl请求</span><br><span class="line">    curl_close($ch);  //关闭curl请求</span><br><span class="line">    mb_convert_encoding($file_contents,&apos;utf-8&apos;);  //转换字符</span><br><span class="line">    print_r($file_contents);  //输出抓取的信息到屏幕</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


<h3 id="0X01-file-get-contents"><a href="#0X01-file-get-contents" class="headerlink" title="0X01 file_get_contents"></a>0X01 file_get_contents</h3><h5 id="stream-context-create-函数"><a href="#stream-context-create-函数" class="headerlink" title="stream_context_create()函数"></a>stream_context_create()函数</h5><ul>
<li>官方手册：<a href="https://www.php.net/manual/zh/function.stream-context-create.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.stream-context-create.php</a></li>
<li>创建并返回一个文本数据流并应用各种选项，可用于fopen(),file_get_contents()等过程的超时设置、代理服务器、请求方式、头信息设置的特殊过程</li>
</ul>
<h5 id="http-build-query-函数"><a href="#http-build-query-函数" class="headerlink" title="http_build_query()函数"></a>http_build_query()函数</h5><ul>
<li>官方手册：<a href="https://www.php.net/manual/zh/function.http-build-query" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.http-build-query</a></li>
<li>将数组转换 url-encoded 之后的请求字符串</li>
<li>▲ 博客介绍使用：<a href="https://www.cnblogs.com/zhja/archive/2012/11/10/2764174.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhja/archive/2012/11/10/2764174.html</a></li>
</ul>
<h5 id="file-get-contents-函数"><a href="#file-get-contents-函数" class="headerlink" title="file_get_contents()函数"></a>file_get_contents()函数</h5><ul>
<li>官方手册：<a href="https://www.php.net/manual/zh/function.file-get-contents" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.file-get-contents</a></li>
<li>将整个文件读入一个字符串</li>
<li>▲ 2020.03.15 只支持HTTP代理 </li>
<li>▲ 2020.03.15 对https的链接抓取会报错</li>
</ul>
<h5 id="模拟GET请求"><a href="#模拟GET请求" class="headerlink" title="模拟GET请求"></a>模拟GET请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $url = &apos;http://www.wyu.cn/&apos;;  //要抓取的url</span><br><span class="line">    $html = file_get_contents($url);  //抓取url</span><br><span class="line">    print_r($html);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="模拟POST请求"><a href="#模拟POST请求" class="headerlink" title="模拟POST请求"></a>模拟POST请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $data = array(</span><br><span class="line">        &apos;name&apos; =&gt; &apos;mzt&apos;,</span><br><span class="line">        &apos;number&apos; =&gt; &apos;7&apos;</span><br><span class="line">    );  //要发送的post数据</span><br><span class="line">    $url = &apos;http://www.wyu.cn/&apos;;  //要抓取的url</span><br><span class="line"></span><br><span class="line">    $post_data = http_build_query($data);  //url-encode编码要post的数据</span><br><span class="line"></span><br><span class="line">    $options = array(</span><br><span class="line">        &apos;http&apos; =&gt; array(</span><br><span class="line">            &apos;method&apos; =&gt; &apos;POST&apos;,  //POST请求的方法</span><br><span class="line">            &apos;request_fulluri&apos;=&gt; true,</span><br><span class="line">            &apos;header&apos; =&gt; array(&quot;Accept-language: en&quot;,</span><br><span class="line">                &quot;Content-type: application/x-www-form-urlencoded&quot;,</span><br><span class="line">                &quot;user_agent: Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&quot;,</span><br><span class="line">                &quot;cookie: aaa=aaa&quot;),  //POST请求的头部，Content-type固定，其他可改</span><br><span class="line">            //&apos;proxy&apos; =&gt; &apos;tcp://127.0.0.1:22716&apos;,  //只支持HTTP代理</span><br><span class="line">            &apos;content&apos; =&gt; $post_data,  //POST的主体，也即POST的数据</span><br><span class="line">            &apos;timeout&apos; =&gt; 5)  //超时时间</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    $options = stream_context_create($options);  //对要传输的数据进行流式处理</span><br><span class="line">    $html = file_get_contents($url,false,$options);  //POST情况下第三个参数要设置</span><br><span class="line">    echo $html;</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试数据是否POST成功<ul>
<li>test.php</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $data = $_POST;</span><br><span class="line">    echo &apos;&lt;pre&gt;&apos;;</span><br><span class="line">    print_r( $data );</span><br><span class="line">    echo &apos;&lt;/pre&gt;&apos;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改url为test.php的路径</li>
<li>查看是否有输出结果</li>
</ul>
<h3 id="0X02-fopen"><a href="#0X02-fopen" class="headerlink" title="0X02 fopen"></a>0X02 fopen</h3><h5 id="stream-get-meta-data-函数"><a href="#stream-get-meta-data-函数" class="headerlink" title="stream_get_meta_data()函数"></a>stream_get_meta_data()函数</h5><ul>
<li>官方手册：<a href="https://www.php.net/manual/zh/function.stream-get-meta-data" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.stream-get-meta-data</a></li>
<li>从封装协议文件指针中取得报头／元数据</li>
<li>▲ 需是从 fopen()，fsockopen() 和 pfsockopen() 建立的流，返回的是一个数组</li>
</ul>
<h5 id="模拟GET请求-1"><a href="#模拟GET请求-1" class="headerlink" title="模拟GET请求"></a>模拟GET请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $url = &apos;http://www.wyu.cn/&apos;;  //要抓取的url</span><br><span class="line">    $fp = fopen($url, &apos;r&apos;);  //以fopen的形式打开url</span><br><span class="line">    stream_get_meta_data($fp);  //转换数据为流</span><br><span class="line">    $result = &apos;&apos;;</span><br><span class="line">    while(!feof($fp))  //feof()判断文件指针是否到文件底部</span><br><span class="line">    &#123;</span><br><span class="line">        $result .= fgets($fp, 1024);  //取出拿到的数据放在字符串中</span><br><span class="line">    &#125;</span><br><span class="line">    echo $result;  //输出</span><br><span class="line">    fclose($fp);  //关闭文件指针</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0X03-fsockopen"><a href="#0X03-fsockopen" class="headerlink" title="0X03 fsockopen"></a>0X03 fsockopen</h3><h5 id="fsockopen-函数"><a href="#fsockopen-函数" class="headerlink" title="fsockopen()函数"></a>fsockopen()函数</h5><ul>
<li>打开一个网络连接或者一个Unix套接字连接</li>
<li>官方手册：<a href="https://www.php.net/manual/zh/function.fsockopen.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.fsockopen.php</a></li>
<li>▲ 2020.03.16 能定制任意的连接，但作为网络抓取的成果是不理想的。若要做网络抓取，需要写完整的http请求并定制回送的http请求</li>
<li>▲ 2020.03.16 存在waf，很难发送正常的数据</li>
</ul>
<h5 id="parse-url-函数"><a href="#parse-url-函数" class="headerlink" title="parse_url()函数"></a>parse_url()函数</h5><ul>
<li>解析一个URL并返回一个关联数组，包含在 URL 中出现的各种组成部分</li>
<li>官方手册：<a href="https://www.php.net/manual/zh/function.parse-url.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.parse-url.php</a></li>
<li>▲ 2020.03.16 此函数对其他url中未有的参数不会进行默认设置</li>
</ul>
<h5 id="模拟GET请求-2"><a href="#模拟GET请求-2" class="headerlink" title="模拟GET请求"></a>模拟GET请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $url = array(&apos;host&apos; =&gt; &apos;www.wyu.cn&apos;, &apos;port&apos; =&gt; &apos;80&apos;,&apos;path&apos; =&gt; &apos;&apos;,&apos;query&apos;=&gt; &apos;/&apos; ,&apos;cookie&apos; =&gt; &apos;/&apos;);  //请求的url数组</span><br><span class="line">    $fp = fsockopen($url[&apos;host&apos;],$url[&apos;port&apos;],$errno,$errstr,10);  //打开一个sock连接</span><br><span class="line">    $fp = fsockopen(&quot;ssl://&quot;.$url[&apos;host&apos;],$url[&apos;port&apos;],$errno,$errstr,10);</span><br><span class="line">    //对https连接的支持</span><br><span class="line"></span><br><span class="line">    if(!$fp)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;$errstr ($errno)&lt;/br&gt;\n&quot;;  //如果文件指针不存在，就输出报错</span><br><span class="line">    &#125;else</span><br><span class="line">    &#123;</span><br><span class="line">        $out = &quot;GET /$url[path] HTTP/1.1\r\n&quot;;</span><br><span class="line">        $out.= &quot;Host: 61.160.224.50:80\r\n&quot;;</span><br><span class="line">        $out.= &quot;User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0\r\n&quot;;</span><br><span class="line">        $out.= &quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n&quot;;</span><br><span class="line">        $out.= &quot;Connection: keep-alive\r\n\r\n&quot;;</span><br><span class="line">        fwrite($fp,$out);  //将http的头写入文件指针</span><br><span class="line">        while(!feof($fp))  //feof()判断文件指针是否到文件底部</span><br><span class="line">        &#123;</span><br><span class="line">            echo fgets($fp,1024);  //取出拿到的数据放在字符串中</span><br><span class="line">        &#125;</span><br><span class="line">        fclose($fp);  //关闭文件指针</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="模拟POST请求-1"><a href="#模拟POST请求-1" class="headerlink" title="模拟POST请求"></a>模拟POST请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $url = &apos;http://www.wyu.cn&apos;;  //要抓取的url</span><br><span class="line">    $url_info = parse_url($url);  //对url进行字段解析</span><br><span class="line"></span><br><span class="line">    $fp = fsockopen($url_info[&apos;host&apos;],80,$errno,$errstr,10);  ////打开一个sock连接</span><br><span class="line"></span><br><span class="line">    $data = array(</span><br><span class="line">        &apos;name&apos; =&gt; &apos;mzt&apos;,</span><br><span class="line">        &apos;number&apos; =&gt; &apos;7&apos;</span><br><span class="line">    );  //要发送的post数据</span><br><span class="line"></span><br><span class="line">    $post_data = http_build_query($data);  //url-encode编码要post的数据</span><br><span class="line"></span><br><span class="line">    if(!$fp)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;$errstr ($errno)&lt;/br&gt;\n&quot;;  //如果文件指针不存在，就输出报错</span><br><span class="line">    &#125;else</span><br><span class="line">    &#123;</span><br><span class="line">        $out = &quot;POST &quot;.$url_info[&apos;path&apos;].&quot; HTTP/1.1\r\n&quot;;</span><br><span class="line">        $out.= &quot;Host: &quot;.$url_info[&apos;host&apos;].&quot;\r\n&quot;;</span><br><span class="line">        $out.= &quot;Content-type: application/x-www-form-urlencodedn&quot;;</span><br><span class="line">        $out.= &quot;User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0\r\n&quot;;</span><br><span class="line">        $out.= &quot;Connection: keep-alive\r\n\r\n&quot;;</span><br><span class="line">        $out.= &quot;$post_data\r\n&quot;;</span><br><span class="line">        fwrite($fp,$out);  //将http的头写入文件指针</span><br><span class="line">        while(!feof($fp))  //feof()判断文件指针是否到文件底部</span><br><span class="line">        &#123;</span><br><span class="line">            echo fgets($fp,1024);  //取出拿到的数据放在字符串中</span><br><span class="line">        &#125;</span><br><span class="line">        fclose($fp);  //关闭文件指针</span><br><span class="line">    &#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>php序列化</title>
    <url>/2020/07/12/php_serialize_unserialize/</url>
    <content><![CDATA[<hr>
<h3 id="php序列化"><a href="#php序列化" class="headerlink" title="php序列化"></a>php序列化</h3><blockquote>
<p>   ▲ 对象的序列化利于对象的保存和传输，也可以让多个文件共享对象</p>
<p>   php序列化的函数为serialize，反序列化的函数为unserialize</p>
</blockquote>
<h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><ul>
<li>php序列化是为了在程序运行的过程中对对象进行转储而产生的。序列化可以将对象转换成字符串，但仅保留对象里的成员变量，不保留函数方法</li>
<li>例子<ul>
<li>O代表是对象，表示改对象名称有4个字符，”Test”表示改对象的名称，3表示改对象里有3个成员</li>
<li>变量的序列化<ul>
<li>public属性序列化后为本身</li>
<li>protected属性序列化后示方式是在变量名前加个%00*%00</li>
<li>private属性序列化后示方式是在变量名前加个%00类名%00</li>
</ul>
</li>
<li>括号里面的值根据分号来分开看，分号左边的是变量名，分号右边的是变量的值</li>
<li>▲ 序列化不保存方法</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    class Test&#123;</span><br><span class="line">        public $a = &apos;This is A&apos;;</span><br><span class="line">        protected $b = &apos;This is B&apos;;</span><br><span class="line">        private $c = &apos;This is C&apos;;</span><br><span class="line">        publice function test1()&#123;</span><br><span class="line">            return &apos;this is test1&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $test = new Test();</span><br><span class="line">    $sTest = serialize($test);</span><br><span class="line">    var_dump($sTest);  </span><br><span class="line">    // 输出为string(96) &quot;O:4:&quot;Test&quot;:3:&#123;s:1:&quot;a&quot;;s:9:&quot;This is A&quot;;s:4:&quot;*b&quot;;s:9:&quot;This is B&quot;;s:7:&quot;Testc&quot;;s:9:&quot;This is C&quot;;&#125;&quot;</span><br><span class="line"></span><br><span class="line">    解释</span><br><span class="line">    O 代表对象 因为我们序列化的是一个对象 序列化数组则用A来表示</span><br><span class="line">    4 代表类名字占三个字符 </span><br><span class="line">    Test 类名</span><br><span class="line">    3 代表三个属性</span><br><span class="line">    s 代表字符串</span><br><span class="line">    1 代表属性名长度</span><br><span class="line">    a 属性名</span><br><span class="line">    s:9:&quot;This is A&quot; 字符串 属性值长度 属性值</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


<h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><ul>
<li>例子</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    class Test&#123;</span><br><span class="line">        public $a = &apos;This is A&apos;;</span><br><span class="line">        protected $b = &apos;This is B&apos;;</span><br><span class="line">        private $c = &apos;This is C&apos;;</span><br><span class="line">        publice function test1()&#123;</span><br><span class="line">            return &apos;this is test1&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $test = new Test();</span><br><span class="line">    $sTest = serialize($test);   </span><br><span class="line">    $uTest = unserialize($sTest);</span><br><span class="line">    var_dump($uTest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //输出，还原成一个数组</span><br><span class="line">    object(Test)#2 (3) &#123;</span><br><span class="line">      [&quot;a&quot;]=&gt;</span><br><span class="line">      string(9) &quot;This is A&quot;</span><br><span class="line">      [&quot;b&quot;:protected]=&gt;</span><br><span class="line">      string(9) &quot;This is B&quot;</span><br><span class="line">      [&quot;c&quot;:&quot;Test&quot;:private]=&gt;</span><br><span class="line">      string(9) &quot;This is C&quot;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h5><ul>
<li>官网地址：<a href="https://www.php.net/manual/zh/language.oop5.magic.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/language.oop5.magic.php</a></li>
<li>__construct()当一个对象创建时被调用</li>
<li>__destruct()当一个对象销毁时被调用</li>
<li>__toString()当一个对象被当作一个字符串使用<ul>
<li>▲ __toString()则必须返回一个字符串</li>
</ul>
</li>
<li>__sleep()在对象被序列化之前运行<ul>
<li>▲ __sleep()期望能return一个数组</li>
</ul>
</li>
<li>__wakeup()在对象被反序列化之后被调用</li>
<li>__get()读取不可访问属性的值时被调用</li>
<li>__invoke()当尝试以调用函数的方式调用一个对象时被调用</li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>php session</title>
    <url>/2020/07/12/php_session/</url>
    <content><![CDATA[<hr>
<h2 id="php-session"><a href="#php-session" class="headerlink" title="php session"></a>php session</h2><ul>
<li>什么是php session<ul>
<li>session</li>
<li>php session</li>
<li>来自官方的解释</li>
</ul>
</li>
<li>php session的存储机制<ul>
<li>php处理器</li>
</ul>
</li>
<li>php session在php.ini中主要存在的配置项</li>
</ul>
<h3 id="0X00-什么是php-session"><a href="#0X00-什么是php-session" class="headerlink" title="0X00 什么是php session"></a>0X00 什么是php session</h3><h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><ul>
<li>session一般称为”会话控制”，简单来说就是是一种客户与网站/服务器更为安全的对话方式</li>
<li>一旦开启了session会话，便可以在网站的任何页面使用或保持这个会话，从而让访问者与网站之间建立了一种”对话”机制</li>
<li>不同语言的会话机制可能有所不同，这里仅讨论php session机制</li>
</ul>
<h5 id="php-session-1"><a href="#php-session-1" class="headerlink" title="php session"></a>php session</h5><ul>
<li>php session可以看做是一个特殊的变量，且该变量是用于存储关于用户会话的信息，或者更改用户会话的设置</li>
<li>需要注意的是，php session变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的，且其对应的具体session值会存储于服务器端，这也是与cookie的主要区别，所以seesion的安全性相对较高</li>
</ul>
<h5 id="来自官方的解释"><a href="#来自官方的解释" class="headerlink" title="来自官方的解释"></a>来自官方的解释</h5><ul>
<li><p>通过为每个独立用户分配唯一的会话ID，可以实现针对不同用户分别存储数据的功能。 会话通常被用来在多个页面请求之间保存及共享信息。一般来说，会话ID通过cookie的方式发送到浏览器，并且在服务器端也是通过会话ID来取回会话中的数据。如果请求中不包含会话ID信息，那么 PHP就会创建一个新的会话，并为新创建的会话分配新的ID</p>
</li>
<li><p>会话的工作流程很简单。当开始一个会话时，PHP会尝试从请求中查找会话ID（通常通过会话 cookie）， 如果请求中不包含会话ID信息，PHP就会创建一个新的会话（php_session_create_id）。会话开始之后，PHP就会将会话中的数据设置到<code>$_SESSION</code>变量中（在http response中通过set-cookie头部发送给客户端保存）。当PHP停止的时候，它会自动读取<code>$_SESSION</code>中的内容，并将其进行序列化， 然后发送给会话保存管理器来进行保存</p>
</li>
<li><p>默认情况下，PHP使用内置的文件会话保存管理器（files）来完成会话的保存。也可以通过配置项<code>session.save_handler</code>来修改所要采用的会话保存管理器。对于文件会话保存管理器，会将会话数据保存到配置项<code>session.save_path</code>所指定的位置 </p>
</li>
<li><p>可以通过调用函数<code>session_start()</code>来手动开始一个会话。 如果配置项<code>session.auto_start</code>设置为1， 那么请求开始的时候，会话会自动开始</p>
</li>
<li><p>PHP脚本执行完毕之后，会话会自动关闭。 同时，也可以通过调用函数<code>session_write_close()</code>来手动关闭会话</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">if (!isset($_SESSION[&apos;username&apos;])) &#123;</span><br><span class="line">  $_SESSION[&apos;username&apos;] = &apos;xianzhi&apos; ;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/php/cookie&session&token/process.png" alt="process"></p>
<h3 id="0X01-php-session的存储机制"><a href="#0X01-php-session的存储机制" class="headerlink" title="0X01 php session的存储机制"></a>0X01 php session的存储机制</h3><ul>
<li>php session的存储机制是由session.serialize_handler来定义引擎的，默认是以文件的方式存储，且存储的文件是由sess_sessionid来决定文件名的</li>
<li>session.serialize_handler定义的引擎有三种<ul>
<li>自PHP 5.5.4起可以使用php_serialize</li>
<li>上述三种处理器中，php_serialize在内部简单地直接使用serialize/unserialize函数，并且不会有php和php_binary所具有的限制。使用较旧的序列化处理器导致$_SESSION的索引既不能是数字也不能包含特殊字符(| 和 !)</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">处理器名称</th>
<th align="center">存储格式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">php</td>
<td align="center">键名</td>
</tr>
<tr>
<td align="center">php_binary</td>
<td align="center">键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</td>
</tr>
<tr>
<td align="center">php_serialize</td>
<td align="center">经过serialize()函数序列化处理的数据</td>
</tr>
</tbody></table>
<h5 id="php处理器"><a href="#php处理器" class="headerlink" title="php处理器"></a>php处理器</h5><ul>
<li>session.serialize_handler等于php时候的序列化结果<ul>
<li>session为$_SESSION[‘session’]的键名，|后为传入GET参数经过序列化后的值</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    ini_set(&apos;session.serialize_handler&apos;,&apos;php&apos;);</span><br><span class="line">    session_start();</span><br><span class="line">    $_SESSION[&apos;username&apos;] = &apos;xianzhi&apos; ;  //username|s:7:&quot;xianzhi&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>session.serialize_handler等于php_binary时候的序列化结果<ul>
<li>#为键名长度对应的ASCII的值，sessionsessionsessionsessionsessions为键名，s:7:”xianzhi”;为传入GET参数经过序列化后的值</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    ini_set(&apos;session.serialize_handler&apos;,&apos;php_binary&apos;);</span><br><span class="line">    session_start();</span><br><span class="line">    $_SESSION[&apos;sessionsessionsessionsessionsessions&apos;] = &apos;xianzhi&apos; ;   //#sessionsessionsessionsessionsessions:7:&quot;xianzhi&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>session.serialize_handler等于php_serialize时候的序列化结果<ul>
<li>a:1表示$_SESSION数组中有1个元素，花括号里面内容即为传入GET参数经过序列化后的值</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    ini_set(&apos;session.serialize_handler&apos;,&apos;php_serialize&apos;);</span><br><span class="line">    session_start();</span><br><span class="line">    $_SESSION[&apos;username&apos;] = &apos;xianzhi&apos; ;  //a:1:&#123;s:8:&quot;username&quot;;s:7:&quot;xianzhi&quot;;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0X02-php-session在php-ini中主要存在的配置项"><a href="#0X02-php-session在php-ini中主要存在的配置项" class="headerlink" title="0X02 php session在php.ini中主要存在的配置项"></a>0X02 php session在php.ini中主要存在的配置项</h3><ul>
<li><p>session.gc_divisor：php session垃圾回收机制相关配置</p>
</li>
<li><p>session.sid_bits_per_character：指定编码的会话ID字符中的位数</p>
</li>
<li><p>session.save_path=””：该配置主要设置session的存储路径</p>
</li>
<li><p>session.save_handler=””：该配置主要设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数</p>
</li>
<li><p>session.use_strict_mode：严格会话模式，严格会话模式不接受未初始化的会话ID并重新生成会话ID</p>
</li>
<li><p>session.use_cookies：指定是否在客户端用cookie来存放会话ID，默认启用</p>
</li>
<li><p>session.cookie_secure：指定是否仅通过安全连接发送cookie，默认关闭</p>
</li>
<li><p>session.use_only_cookies：指定是否在客户端仅仅使用cookie来存放会话ID，启用的话，可以防止有关通过URL传递会话ID的攻击</p>
</li>
<li><p>session.name：指定会话名以用做cookie的名字，只能由字母数字组成，默认为PHPSESSID</p>
</li>
<li><p>session.auto_start：指定会话模块是否在请求开始时启动一个会话，默认值为0，不启动</p>
</li>
<li><p>session.cookie_lifetime：指定了发送到浏览器的cookie的生命周期，单位为秒，值为0 表示”直到关闭浏览器”默认为0</p>
</li>
<li><p>session.cookie_path：指定要设置会话cookie 的路径，默认为 /</p>
</li>
<li><p>session.cookie_domain：指定要设置会话cookie 的域名，默认为无，表示根据 cookie 规范产生cookie的主机名</p>
</li>
<li><p>session.cookie_httponly：将Cookie标记为只能通过HTTP协议访问，即无法通过脚本语言（例如JavaScript）访问Cookie，此设置可以有效地帮助通过XSS攻击减少身份盗用</p>
</li>
<li><p>session.serialize_handler：定义用来序列化/反序列化的处理器名字，默认使用php，还有其他引擎，且不同引擎的对应的session的存储方式不相同，具体可见下文所述</p>
</li>
<li><p>session.gc_probability：该配置项与session.gc_divisor合起来用来管理garbagecollection，即垃圾回收进程启动的概率</p>
</li>
<li><p>session.gc_divisor：该配置项与session.gc_probability合起来定义了在每个会话初始化时启动垃圾回收进程的概率</p>
</li>
<li><p>session.gc_maxlifetime：指定过了多少秒之后数据就会被视为“垃圾”并被清除，垃圾搜集可能会在session启动的时候开始（取决于session.gc_probability和session.gc_divisor）</p>
</li>
<li><p>session.referer_check：包含有用来检查每个HTTPReferer的子串。如果客户端发送了Referer信息但是在其中并未找到该子串，则嵌入的会话 ID 会被标记为无效。默认为空字符串</p>
</li>
<li><p>session.cache_limiter：指定会话页面所使用的缓冲控制方法（none/nocache/private/private_no_expire/public）默认为nocache</p>
</li>
<li><p>session.cache_expire：以分钟数指定缓冲的会话页面的存活期，此设定对nocache缓冲控制方法无效。默认为 180</p>
</li>
<li><p>session.use_trans_sid：指定是否启用透明SID支持。默认禁用</p>
</li>
<li><p>session.sid_length：配置会话ID字符串的长度。会话ID的长度可以在22到256之间。默认值为32</p>
</li>
<li><p>session.trans_sid_tags：指定启用透明sid支持时重写哪些HTML标签以包括会话ID</p>
</li>
<li><p>session.trans_sid_hosts：指定启用透明sid支持时重写的主机，以包括会话ID</p>
</li>
<li><p>session.sid_bits_per_character：配置编码的会话ID字符中的位数</p>
</li>
<li><p>session.upload_progress.enabled：启用上传进度跟踪，并填充$_SESSION变量， 默认启用</p>
</li>
<li><p>session.upload_progress.cleanup：读取所有POST数据（即完成上传）后，立即清理进度信息，默认启用</p>
</li>
<li><p>session.upload_progress.prefix：配置<code>$ _SESSION</code>中用于上传进度键的前缀，默认为upload_progress_</p>
</li>
<li><p>session.upload_progress.name：<code>$ _SESSION</code>中用于存储进度信息的键的名称，默认为PHP_SESSION_UPLOAD_PROGRESS</p>
</li>
<li><p>session.upload_progress.freq：定义应该多长时间更新一次上传进度信息</p>
</li>
<li><p>session.upload_progress.min_freq：更新之间的最小延迟</p>
</li>
<li><p>session.lazy_write：配置会话数据在更改时是否被重写，默认启用</p>
</li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>php将数组写入文件的方法</title>
    <url>/2020/07/12/php_write_array_to_file/</url>
    <content><![CDATA[<hr>
<h3 id="php将数组写入文件的方法"><a href="#php将数组写入文件的方法" class="headerlink" title="php将数组写入文件的方法"></a>php将数组写入文件的方法</h3><ul>
<li>serialize()函数</li>
<li>print_r()函数</li>
<li>var_export()函数</li>
</ul>
<h5 id="serialize-函数"><a href="#serialize-函数" class="headerlink" title="serialize()函数"></a>serialize()函数</h5><ul>
<li>使用 serialize 将数组序列化，存储在文件中；调用时，再使用 unserialize 还原</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $file = &apos;./1.txt&apos;;</span><br><span class="line">    $array=array(&apos;color&apos;=&gt; array(&apos;blue&apos;,&apos;red&apos;,&apos;green&apos;),&apos;size&apos;=&gt; array(&apos;small&apos;,&apos;medium&apos;,&apos;large&apos;)); </span><br><span class="line"></span><br><span class="line">    //缓存</span><br><span class="line">    if(false!==fopen($file, &quot;w+&quot;))&#123;</span><br><span class="line">        file_put_contents($file, serialize($array));</span><br><span class="line">    &#125;</span><br><span class="line">    //读出缓存</span><br><span class="line"></span><br><span class="line">    $handle = fopen($file,&quot;r+&quot;);</span><br><span class="line">    $cacheArray = unserialize(fread($handle, filesize($file)));</span><br><span class="line">    var_dump($cacheArray);</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="print-r-函数"><a href="#print-r-函数" class="headerlink" title="print_r()函数"></a>print_r()函数</h5><ul>
<li>print_r()将数组打印到txt文件中<ul>
<li>▲ 第二个参数为TRUE，print_r()会直接返回信息，而不是输出</li>
<li>▲ 如果输入的内容是 string、 integer 或 float，会直接输出值本身。 如果输入的内容是 array，展示的格式会显示数组的键和包含的元素。object 也类似。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    $array=array(&apos;color&apos;=&gt; array(&apos;blue&apos;,&apos;red&apos;,&apos;green&apos;),&apos;size&apos;=&gt; array(&apos;small&apos;,&apos;medium&apos;,&apos;large&apos;)); </span><br><span class="line"></span><br><span class="line">    file_put_contents(&apos;./1.txt&apos;, print_r($array,true));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="var-export-函数"><a href="#var-export-函数" class="headerlink" title="var_export()函数"></a>var_export()函数</h5><ul>
<li>var_export()直接将数组以完整数组的形式存储到文件中</li>
<li>▲ 输出或返回一个变量的字符串表示，返回的是一个合法的PHP代码，这点与var_dump()不同</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $file = &apos;./1.txt&apos;;</span><br><span class="line">    $array=array(&apos;color&apos;=&gt; array(&apos;blue&apos;,&apos;red&apos;,&apos;green&apos;),&apos;size&apos;=&gt; array(&apos;small&apos;,&apos;medium&apos;,&apos;large&apos;)); </span><br><span class="line"></span><br><span class="line">    //缓存</span><br><span class="line">    $text = var_export($array,true);</span><br><span class="line">    if(false!==fopen($file,&apos;w+&apos;))&#123;</span><br><span class="line">        file_put_contents($file, $text);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;创建失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>json在php中的应用</title>
    <url>/2020/07/12/json_in_php/</url>
    <content><![CDATA[<hr>
<h3 id="json在php中的应用"><a href="#json在php中的应用" class="headerlink" title="json在php中的应用"></a>json在php中的应用</h3><ul>
<li>json_encode()函数</li>
<li>json_decode()函数</li>
<li>php从数据库读取数据,并以json格式返回数据的方法</li>
</ul>
<h5 id="json-encode-函数"><a href="#json-encode-函数" class="headerlink" title="json_encode()函数"></a>json_encode()函数</h5><ul>
<li>来将数组和对象，转换为json格式</li>
<li>▲ json只接受utf-8编码的字符，所以json_encode()的参数必须是utf-8编码，否则会得到空字符或者null</li>
<li>数组格式<ul>
<li>索引数组 -&gt; 数组格式</li>
<li>关联数组 -&gt; 对象格式</li>
<li>类 -&gt; 对象格式<ul>
<li>除了公开变量，其他东西（）</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">   //索引数组格式转换为json格式</span><br><span class="line"></span><br><span class="line">   $arr = array(&apos;one&apos;,&apos;two&apos;,&apos;three&apos;);</span><br><span class="line">   echo json_encode($arr);  //输出为 [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;]</span><br><span class="line">   echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //关联数组格式转换为json格式</span><br><span class="line"></span><br><span class="line">   $arr1 = array(&apos;hi&apos; =&gt; &apos;one&apos;, &apos;how&apos; =&gt; &apos;are&apos;, &apos;are&apos; =&gt; &apos;you&apos; );</span><br><span class="line">   echo json_encode($arr1);  //输出为 &#123;&quot;hi&quot;:&quot;one&quot;,&quot;how&quot;:&quot;are&quot;,&quot;are&quot;:&quot;you&quot;&#125;</span><br><span class="line">   echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">   //类转换为json格式</span><br><span class="line"></span><br><span class="line">   class Foo&#123;</span><br><span class="line">    const ERROR_CODE = &apos;404&apos;;</span><br><span class="line">    public $publice_ex = &apos;this is publice&apos;;</span><br><span class="line">    private $private_ex = &apos;this is private&apos;;</span><br><span class="line">    protected $protected_ex = &apos;this should be protected&apos;;</span><br><span class="line">    public function getErrorCode()&#123;</span><br><span class="line">        return self::ERROR_CODE;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $foo = new Foo();</span><br><span class="line">   $foo_json = json_encode($foo);</span><br><span class="line">   echo $foo_json;  //输出为 &#123;&quot;publice_ex&quot;:&quot;this is publice&quot;&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="json-decode-函数"><a href="#json-decode-函数" class="headerlink" title="json_decode()函数"></a>json_decode()函数</h5><ul>
<li>将json文本转换为相应的PHP数据结构</li>
<li>▲ 通常情况下，json_decode()总是返回一个PHP对象，而不是数组</li>
<li>▲ json只能用来表示对象（object）和数组（array），如果对一个字符串或数值使用json_decode()，将会返回null</li>
<li>常见注意事项：<ul>
<li>json的分隔符（delimiter）只允许使用双引号，不能使用单引号</li>
<li>json名值对的”名”（冒号左边的部分），任何情况下都必须使用双引号</li>
<li>最后一个值之后不能添加逗号</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $json = &apos;&#123;&quot;foo&quot;:123,&quot;fll&quot;:456&#125;&apos;;</span><br><span class="line">    $obj = json_decode($json);</span><br><span class="line">    var_dump($obj);  //输出为 object(stdClass)#1 (2) &#123; [&quot;foo&quot;]=&gt; int(123) [&quot;fll&quot;]=&gt; int(456) &#125; </span><br><span class="line">    echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    //强制转化为关联数组</span><br><span class="line"></span><br><span class="line">    $obj1 = json_decode($json,true);</span><br><span class="line">    var_dump($obj1);  //输出为 array(2) &#123; [&quot;foo&quot;]=&gt; int(123) [&quot;fll&quot;]=&gt; int(456) &#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="php从数据库读取数据-并以json格式返回数据的方法"><a href="#php从数据库读取数据-并以json格式返回数据的方法" class="headerlink" title="php从数据库读取数据,并以json格式返回数据的方法"></a>php从数据库读取数据,并以json格式返回数据的方法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $data = array();</span><br><span class="line">    $json = &apos;&apos;;</span><br><span class="line">    class user&#123;</span><br><span class="line">        public $id;</span><br><span class="line">        public $fname;</span><br><span class="line">        public $lname;</span><br><span class="line">        public $email;</span><br><span class="line">        public $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $conn = mysqli_connect(&apos;127.0.0.1&apos;,&apos;root&apos;,&apos;root&apos;,&apos;php_mysql_demo&apos;);</span><br><span class="line"></span><br><span class="line">    $sql = &quot;select * from json&quot;;</span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line"></span><br><span class="line">    if($result)&#123;</span><br><span class="line">        while($row = mysqli_fetch_array($result,MYSQLI_ASSOC))</span><br><span class="line">        &#123;</span><br><span class="line">            $user = new user();</span><br><span class="line">            $user-&gt;id = $row[&apos;id&apos;];</span><br><span class="line">            $user-&gt;fname = $row[&apos;fname&apos;];</span><br><span class="line">            $user-&gt;lname = $row[&apos;lname&apos;];</span><br><span class="line">            $user-&gt;email = $row[&apos;email&apos;];</span><br><span class="line">            $user-&gt;password = $row[&apos;password&apos;];</span><br><span class="line">            $data[] = $user;</span><br><span class="line">        &#125;</span><br><span class="line">        $json = json_encode($data);</span><br><span class="line">        echo $json;  //输出为 [&#123;&quot;id&quot;:&quot;7&quot;,&quot;fname&quot;:&quot;tomas&quot;,&quot;lname&quot;:&quot;sky&quot;,&quot;email&quot;:&quot;643008933@qq.com&quot;,&quot;password&quot;:&quot;mzt&quot;&#125;]</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;查询失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>Web--Training v1.0</title>
    <url>/2020/07/12/web_training/</url>
    <content><![CDATA[<hr>
<h3 id="Web–Training-v1-0"><a href="#Web–Training-v1-0" class="headerlink" title="Web–Training v1.0"></a>Web–Training v1.0</h3><p>⭐ 靶场链接为度盘：链接：<a href="https://pan.baidu.com/s/1I0oJLdVzjv0grHzlgITvLg" target="_blank" rel="noopener">https://pan.baidu.com/s/1I0oJLdVzjv0grHzlgITvLg</a> 提取码：dcib</p>
<blockquote>
<p>   靶场要点：</p>
<ol>
<li><p>本靶场为自搭建，素材源码来自互联网以及自编写，若有侵权，联系我删除</p>
</li>
<li><p>本靶场只用作Web安全初学者所用，靶场收集来之不易，且用且珍惜</p>
</li>
<li><p>本靶场不用做任何商业用途，只作学习交流</p>
</li>
</ol>
</blockquote>
<ul>
<li>靶场系统<ul>
<li>Window Server 2003 Enterprise Edition Service Pack 2</li>
</ul>
</li>
<li>Web服务（由PHPstudy、JSPstudy以及自安装）<ul>
<li>php 5.3.29/5.3.29-nts/5.2.17</li>
<li>Apache 2.4.10</li>
<li>Nginx 1.6.2</li>
<li>MySQL 5.5.40</li>
<li>phpMyAdmin 3.5.8.2</li>
<li>OpenSSL 1.0.1e&amp;0.9.8y</li>
<li>JDK 1.7_51</li>
<li>Tomcat 6.0.44</li>
<li>IIS6.0</li>
<li>PostgreSQL 8.2</li>
<li>SQL Server 2005</li>
<li>Redis 2.6.8-pre2</li>
</ul>
</li>
<li>另安装扩展<ul>
<li>ISAPI_Rewrite3</li>
</ul>
</li>
<li>Web Application Firewall     <ul>
<li>SafeDogIIS（安全狗）V4.0</li>
<li>D盾 v2.1.5.4</li>
<li>云锁 v3.1.18.5</li>
<li>libinjection-3.10.0（有安装包，暂未安装）</li>
<li>ModSecurityIIS_2.9.3-32b.msi（有安装包，暂未安装）</li>
<li>SafeDogApache（安全狗）V4.0（有安装包，暂未安装）</li>
<li>ngx_lua_waf-0.7.2（有安装包，暂未安装）</li>
<li>PHPIDS-0.7（有安装包，暂未安装）</li>
</ul>
</li>
</ul>
<h3 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h3><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><ul>
<li>源码靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8001</td>
<td align="center">Access注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8002</td>
<td align="center">Mssql注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8003</td>
<td align="center">Mysql注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8004</td>
<td align="center">Postgresql注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8011</td>
<td align="center">Cookie注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8012</td>
<td align="center">伪静态注入</td>
<td align="center">需要开启ISAPI_Rewrite3重写扩展</td>
</tr>
<tr>
<td align="center">8013</td>
<td align="center">Get注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8014</td>
<td align="center">Post注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8015</td>
<td align="center">二阶注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8016</td>
<td align="center">XFF注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8017</td>
<td align="center">XML文件注入</td>
<td align="center">只是文件存储，非XXE</td>
</tr>
<tr>
<td align="center">8018</td>
<td align="center">Union联合注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8019</td>
<td align="center">报错注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8020</td>
<td align="center">Boolean注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8021</td>
<td align="center">Base64注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8022</td>
<td align="center">时间注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8023</td>
<td align="center">宽字节注入(Get)</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8024</td>
<td align="center">堆叠注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8025</td>
<td align="center">Insert型注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8026</td>
<td align="center">Delete型注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8027</td>
<td align="center">Update型注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8028</td>
<td align="center">搜索型注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8029</td>
<td align="center">宽字节注入</td>
<td align="center">有注入用代码widebytes-post.php/widebytes-post.py</td>
</tr>
<tr>
<td align="center">8030</td>
<td align="center">Order by注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8031</td>
<td align="center">Group by注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8032</td>
<td align="center">二次编码注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8033</td>
<td align="center">万能密钥-简单</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8034</td>
<td align="center">万能密钥-Uinon</td>
<td align="center"></td>
</tr>
</tbody></table>
<ul>
<li>CMS/比赛靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8051</td>
<td align="center">Bluecms</td>
<td align="center">Http头注入</td>
</tr>
<tr>
<td align="center">8052</td>
<td align="center">74cms</td>
<td align="center">二阶注入</td>
</tr>
<tr>
<td align="center">8053</td>
<td align="center">Jeany</td>
<td align="center">搜索型注入</td>
</tr>
<tr>
<td align="center">8054</td>
<td align="center">南方数据</td>
<td align="center">Cookie注入</td>
</tr>
<tr>
<td align="center">8055</td>
<td align="center">Beecms</td>
<td align="center">后台注入</td>
</tr>
<tr>
<td align="center">8056</td>
<td align="center">W78cms</td>
<td align="center">搜索框注入</td>
</tr>
<tr>
<td align="center">8057</td>
<td align="center">Shop7z</td>
<td align="center">偏移注入</td>
</tr>
<tr>
<td align="center">8058</td>
<td align="center">佛山发发鱼</td>
<td align="center">偏移注入</td>
</tr>
<tr>
<td align="center">8059</td>
<td align="center">Phpcms_v9</td>
<td align="center">Authkey注入，有注入用代码phpv9 authkey.php</td>
</tr>
<tr>
<td align="center">8060</td>
<td align="center">Xycms家庭装修</td>
<td align="center">Access注入</td>
</tr>
<tr>
<td align="center">8061</td>
<td align="center">MetInfo v5.0</td>
<td align="center">Sql注入</td>
</tr>
<tr>
<td align="center">8062</td>
<td align="center">Xycms搬家</td>
<td align="center">Sql注入</td>
</tr>
<tr>
<td align="center">8063</td>
<td align="center">Xdcms</td>
<td align="center">Post注入</td>
</tr>
<tr>
<td align="center">8064</td>
<td align="center">19年强网杯随便注</td>
<td align="center">堆叠注入，需初始化数据库</td>
</tr>
</tbody></table>
<h4 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h4><ul>
<li>源码靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8101</td>
<td align="center">XXE有回显注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8102</td>
<td align="center">XXE无回显有报错注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8103</td>
<td align="center">XXE无报错无回显注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8104</td>
<td align="center">Simplexml_load_string</td>
<td align="center">php函数</td>
</tr>
<tr>
<td align="center">8105</td>
<td align="center">DOMDocument</td>
<td align="center">php函数</td>
</tr>
<tr>
<td align="center">8106</td>
<td align="center">SimpleXMLElement</td>
<td align="center">php函数</td>
</tr>
</tbody></table>
<ul>
<li>CMS/比赛靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8151</td>
<td align="center">S-CMS医院建站系统v3.0</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8152</td>
<td align="center">MetInfo-v6.0.0</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8153</td>
<td align="center">Phpshe-v1.7</td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h4><ul>
<li>源码靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8201</td>
<td align="center">ssrf全测试</td>
<td align="center">多种协议的测试，dict/http/gopher/file等协议，测试时可开启redis-server</td>
</tr>
<tr>
<td align="center">8202</td>
<td align="center">ssrf无回显</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8303</td>
<td align="center">ssrf-http(s)测试</td>
<td align="center">有注入用代码301.php/302.php</td>
</tr>
<tr>
<td align="center">8204</td>
<td align="center">file-get-contents</td>
<td align="center">php函数</td>
</tr>
<tr>
<td align="center">8205</td>
<td align="center">fsockopen</td>
<td align="center">php函数</td>
</tr>
</tbody></table>
<ul>
<li>CMS/比赛靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8251</td>
<td align="center">Disccuz-x3.1</td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ul>
<li>源码靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8301</td>
<td align="center">Nginx文件解析漏洞</td>
<td align="center">需开启Nginx</td>
</tr>
<tr>
<td align="center">8302</td>
<td align="center">Apache文件解析漏洞</td>
<td align="center">需开启Apache</td>
</tr>
<tr>
<td align="center">8303</td>
<td align="center">IIS文件解析漏洞</td>
<td align="center">需开启IIS</td>
</tr>
<tr>
<td align="center">8304</td>
<td align="center">Upload靶场的链接与解析</td>
<td align="center">建议玩Upload-labs时边看此端口的内容</td>
</tr>
<tr>
<td align="center">8305</td>
<td align="center">表单无按钮提交</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8306</td>
<td align="center">修改上传目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8307</td>
<td align="center">双文件上传</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8308</td>
<td align="center">Fckeditor编辑器 v2.4.3</td>
<td align="center">基于Xycms</td>
</tr>
<tr>
<td align="center">8309</td>
<td align="center">Fckeditor编辑器 v2.5</td>
<td align="center">基于Xycms</td>
</tr>
<tr>
<td align="center">8310</td>
<td align="center">Fckeditor编辑器 v2.6.3</td>
<td align="center">基于Xycms</td>
</tr>
<tr>
<td align="center">8311</td>
<td align="center">EWEB编辑器 v5.5</td>
<td align="center">基于Xycms，有注入用代码eweb5.5.html</td>
</tr>
</tbody></table>
<ul>
<li>CMS/比赛靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8351</td>
<td align="center">dedecms v5.7 sp1</td>
<td align="center">上传目录修改</td>
</tr>
<tr>
<td align="center">8352</td>
<td align="center">南方数据</td>
<td align="center">双文件上传</td>
</tr>
<tr>
<td align="center">8353</td>
<td align="center">冠龙科技 v6.0</td>
<td align="center">目录遍历/上传</td>
</tr>
<tr>
<td align="center">8354</td>
<td align="center">W78企业建站系统</td>
<td align="center">利用exp构造上传</td>
</tr>
</tbody></table>
<h4 id="php相关"><a href="#php相关" class="headerlink" title="php相关"></a>php相关</h4><ul>
<li>源码靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8401</td>
<td align="center">php相关测试</td>
<td align="center">文件包含、PHP伪协议、代码执行、变量覆盖、目录遍历、URL重定向</td>
</tr>
<tr>
<td align="center">8402</td>
<td align="center">__wakeup()</td>
<td align="center">php反序列化wakeup函数的绕过</td>
</tr>
<tr>
<td align="center">8403</td>
<td align="center">php://input</td>
<td align="center">php伪协议</td>
</tr>
<tr>
<td align="center">8404</td>
<td align="center">php://filter</td>
<td align="center">php伪协议</td>
</tr>
</tbody></table>
<ul>
<li>CMS/比赛靶场</li>
</ul>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8451</td>
<td align="center">易库影视CMS</td>
<td align="center">文件包含</td>
</tr>
<tr>
<td align="center">8452</td>
<td align="center">海洋CMS v6.28</td>
<td align="center">代码执行</td>
</tr>
<tr>
<td align="center">8453</td>
<td align="center">dedecms v5.7</td>
<td align="center">变量覆盖</td>
</tr>
<tr>
<td align="center">8454</td>
<td align="center">20年网鼎杯青龙组Areserialize</td>
<td align="center">php反序列化</td>
</tr>
<tr>
<td align="center">8455</td>
<td align="center">buuoj极客大挑战2019PHP</td>
<td align="center">php反序列化</td>
</tr>
</tbody></table>
<h4 id="集成靶场以及Webshell"><a href="#集成靶场以及Webshell" class="headerlink" title="集成靶场以及Webshell"></a>集成靶场以及Webshell</h4><table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">9001</td>
<td align="center">mssql-labs</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9002</td>
<td align="center">sqli-labs</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9003</td>
<td align="center">xxe-lab</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9004</td>
<td align="center">phpaudit-xxe</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9005</td>
<td align="center">xss-labs</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9006</td>
<td align="center">upload-labs</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9051</td>
<td align="center">WEBSHELL箱子管理系统 V1.0</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9052</td>
<td align="center">魔神WebShell</td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">靶场</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">88</td>
<td align="center">test</td>
<td align="center">Everyone的System权限</td>
</tr>
<tr>
<td align="center">89</td>
<td align="center">cgi-test</td>
<td align="center">Everyone的System权限、cgi测试</td>
</tr>
<tr>
<td align="center">80</td>
<td align="center">默认网站</td>
<td align="center">防冲突停止使用</td>
</tr>
</tbody></table>
<h3 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h3><h4 id="大靶场"><a href="#大靶场" class="headerlink" title="大靶场"></a>大靶场</h4><ul>
<li>XSS</li>
<li>CSRF</li>
<li>逻辑漏洞</li>
<li>Getshell靶场</li>
<li>JSP相关漏洞测试：Stuct2、Java反序列化漏洞、Tomcat部署漏洞、WebLogic攻击</li>
<li>▲ 各种靶场的更多CMS</li>
<li>▲ 可进行测试的CTF靶场</li>
</ul>
]]></content>
      <categories>
        <category>Web Security</category>
      </categories>
  </entry>
  <entry>
    <title>php操作mysql</title>
    <url>/2020/07/12/php_mysql/</url>
    <content><![CDATA[<hr>
<h3 id="php操作mysql"><a href="#php操作mysql" class="headerlink" title="php操作mysql"></a>php操作mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $lin = mysqli_connect(&apos;127.0.0.1&apos;,&apos;root&apos;,&apos;root&apos;);</span><br><span class="line"></span><br><span class="line">    //数据库使用--mysqli_query</span><br><span class="line"></span><br><span class="line">    mysqli_query($lin,&quot;use php_mysql_demo&quot;);  //选择数据库</span><br><span class="line">    mysqli_query($lin,&quot;set names utf8&quot;);  //设置数据库编码</span><br><span class="line"></span><br><span class="line">    mysqli_query($lin,&quot;insert into admin values (&apos;xindong&apos;,&apos;123&apos;)&quot;);  //添加数据库记录</span><br><span class="line">    mysqli_query($lin,&quot;delete from admin where username = &apos;1111&apos;&quot;);  //删除数据库记录</span><br><span class="line">    mysqli_query($lin,&quot;update admin set username = &apos;1111&apos;&quot;);  //修改数据</span><br><span class="line"></span><br><span class="line">    //数据库查询使用--mysqli_fetch_array</span><br><span class="line">    /*</span><br><span class="line">    mysqli_fetch_array()包含两个内容，默认的，函数可以通过第二个参数来设定返回的类型</span><br><span class="line">    1. MYSQLI_ASSOC：返回关联数组</span><br><span class="line">    2. MYSQLI_NUM：返回索引数组</span><br><span class="line">    3. MYSQLI_BOTH：默认的，两种数值都返回</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    $list = mysqli_query($lin,&quot;select * from admin&quot;);</span><br><span class="line">    $list_data = mysqli_fetch_array($list,MYSQLI_ASSOC);</span><br><span class="line">    var_dump($list_data);  //打印单行数据，指针默认从顶部开始</span><br><span class="line">    echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    //输出查询的整个数据库</span><br><span class="line">    $list1 = mysqli_query($lin,&quot;select * from admin&quot;);</span><br><span class="line">    $arr = array();</span><br><span class="line">    while($list1_data = mysqli_fetch_array($list1,MYSQLI_ASSOC))</span><br><span class="line">    &#123;</span><br><span class="line">        $arr[] = $list1_data;</span><br><span class="line">        //直接输出 var_dump($list1_data);</span><br><span class="line">    &#125;</span><br><span class="line">    var_dump($arr);  //打印整个数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     /*</span><br><span class="line">    mysqli_errno()：出现错误的错误编号</span><br><span class="line">    mysqli_error()：错误信息</span><br><span class="line">    */</span><br><span class="line">    $lin1 = mysqli_connect(&apos;127.0.0.1&apos;,&apos;root&apos;,&apos;root&apos;);</span><br><span class="line">    $a = mysqli_query($lin,&quot;use demo11111&quot;);  //不存在的数据库</span><br><span class="line">    //mysqli_query($lin,&quot;set names utf8&quot;);</span><br><span class="line"></span><br><span class="line">    if(mysqli_errno($lin))</span><br><span class="line">    &#123;</span><br><span class="line">        echo &apos;&lt;/br&gt;&apos;;</span><br><span class="line">        echo mysqli_errno($lin);  //输出错误的编号</span><br><span class="line">        echo &apos;&lt;/br&gt;&apos;; </span><br><span class="line">        echo mysqli_error($lin);  //输出错误信息</span><br><span class="line">    &#125;</span><br><span class="line">    echo &apos;&lt;/br&gt;&apos;;</span><br><span class="line"></span><br><span class="line">    //数据库的行数</span><br><span class="line">    /*</span><br><span class="line">    mysqli_data_seek()：用来设置结果集指针的位置</span><br><span class="line">    mysqli_num_row()：取得结果集的长度（记录的个数）</span><br><span class="line">    */</span><br><span class="line">    $lin2 = mysqli_connect(&apos;127.0.0.1&apos;,&apos;root&apos;,&apos;root&apos;);</span><br><span class="line">    $b = mysqli_query($lin2,&quot;use php_mysql_demo&quot;); </span><br><span class="line"></span><br><span class="line">    $list2 = mysqli_query($lin2,&quot;select * from admin&quot;);</span><br><span class="line"></span><br><span class="line">    echo mysqli_num_rows($list2);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>php cookie</title>
    <url>/2020/07/12/php_cookie/</url>
    <content><![CDATA[<hr>
<h3 id="php-cookie"><a href="#php-cookie" class="headerlink" title="php cookie"></a>php cookie</h3><h5 id="Cookie与Session"><a href="#Cookie与Session" class="headerlink" title="Cookie与Session"></a>Cookie与Session</h5><ul>
<li>session.save_path=”D:\phpStudy\tmp\tmp”</li>
<li>请求网站如果COOKIE没有PHPSESSID 那服务器就给你定义一个PHPSESSID<br>如果请求网站有PHPSESSID，服务器看到了PHPSESSID之后获取PHPSESSID的内容去找sessionID的内容名字的文件名。</li>
<li>session操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    session_start();  //会话开始</span><br><span class="line">    $username = empty($_POST[&apos;username&apos;])? &quot;&quot; : $_POST[&apos;username&apos;];</span><br><span class="line">    $password = empty($_POST[&apos;password&apos;])? &quot;&quot; : $_POST[&apos;password&apos;];</span><br><span class="line"></span><br><span class="line">    if(isset($_SESSION[&apos;username&apos;]))</span><br><span class="line">    &#123;</span><br><span class="line">        echo &apos;1&apos;;</span><br><span class="line">    &#125;elseif($username == &apos;admin&apos; and $password == &apos;123456&apos;)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;登陆成功&quot;;</span><br><span class="line">        $_SESSION[&apos;username&apos;]=&apos;1&apos;;  //写入session文件</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        include_once &apos;./form.html&apos;;  //包含表单</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="Cookie跨域"><a href="#Cookie跨域" class="headerlink" title="Cookie跨域"></a>Cookie跨域</h5><ul>
<li>默认的，cookie只能对当前域名（完整域名：有效的二级域名）有效</li>
<li>cookie跨域：指的是允许cookie在不同的二级域名之间共享（一级域名一致）</li>
<li>PHP设置COOKIE</li>
<li>SetCookie(“名字”,值,有效时间,’有效路径’,’有效域’);</li>
<li>SetCookie(‘PHPSESSID’,session_id(),time()+100,’/‘,”xss.cn”);</li>
<li>▲ session.auto_start = 0  //在配置文件中，默认不开启session_start()</li>
<li>▲ session.name = PHPSESSID  //跨域要设置Cookie的名称</li>
<li>▲ session.cookie_domain =   //cookie的跨域，默认为空不能跨域</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    //发送cookie-1</span><br><span class="line">    session_start();</span><br><span class="line">    Setcookie(&apos;name&apos;,&apos;xindong&apos;,time()+100,&apos;/&apos;,&apos;127.0.0.1&apos;);</span><br><span class="line">    echo session_id();  //输出cookie</span><br><span class="line"></span><br><span class="line">    //发送cookie-2</span><br><span class="line">    session_start();</span><br><span class="line">    $_SESSION[&apos;name&apos;] = &apos;xindong&apos;;</span><br><span class="line">    var_dump($_SESSION);</span><br><span class="line">    Setcookie(&apos;name&apos;,session_id(),time()+100,&apos;/&apos;,&apos;127.0.0.1&apos;);</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="跨域尝试"><a href="#跨域尝试" class="headerlink" title="跨域尝试"></a>跨域尝试</h5><ul>
<li>删除session</li>
<li>虚拟主机/hosts文件 -&gt; <a href="http://www.test1mzt.com/cookie.www.test1mzt.com" target="_blank" rel="noopener">www.test1mzt.com/cookie.www.test1mzt.com</a></li>
<li>设置cookie的域 -&gt; <a href="http://www.test1mzt.com（www.test1mzt.com下的1.php）" target="_blank" rel="noopener">www.test1mzt.com（www.test1mzt.com下的1.php）</a></li>
<li>打印cookie -&gt; cookie.<a href="http://www.test1mzt.com（cookie.www.test1mzt.com的1.php）" target="_blank" rel="noopener">www.test1mzt.com（cookie.www.test1mzt.com的1.php）</a></li>
<li>访问<a href="http://www.test1mzt.com尝试" target="_blank" rel="noopener">www.test1mzt.com尝试</a> -&gt; 是否输出xindong</li>
<li>访问cookie.<a href="http://www.test1mzt.com" target="_blank" rel="noopener">www.test1mzt.com</a> -&gt; 是否输出为xindong</li>
<li>/test1/1.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    session_start();</span><br><span class="line">    $_SESSION[&apos;name&apos;] = &apos;xindong&apos;;</span><br><span class="line">    var_dump($_SESSION);</span><br><span class="line">    var_dump(session_id());</span><br><span class="line">    Setcookie(&apos;PHPSESSID&apos;,session_id(),time()+100,&apos;/&apos;,&apos;www.test1mzt.com&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>/cookie.test1/1.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    session_start();</span><br><span class="line">    var_dump(session_id());</span><br><span class="line">    var_dump($_SESSION);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>php文件相关操作</title>
    <url>/2020/07/12/php_file_about/</url>
    <content><![CDATA[<hr>
<h2 id="php文件相关操作"><a href="#php文件相关操作" class="headerlink" title="php文件相关操作"></a>php文件相关操作</h2><ul>
<li>文件操作</li>
<li>文件包含<ul>
<li>文件包含形式</li>
<li>区别</li>
<li>文件加载原理</li>
<li>文件加载路径</li>
<li>文件嵌套包含</li>
</ul>
</li>
<li>文件上传<ul>
<li>配置php.ini</li>
<li>新建一个文件上传</li>
</ul>
</li>
</ul>
<h3 id="0X00-文件操作"><a href="#0X00-文件操作" class="headerlink" title="0X00 文件操作"></a>0X00 文件操作</h3><ul>
<li>fopen() 的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。<ul>
<li>$myfile = fopen(“webdictionary.txt”, “r”) or die(“Unable to open file!”);</li>
</ul>
</li>
<li>读文件<ul>
<li>Fgets($find) //读第一行文件<ul>
<li>▲ 文件指针必须是有效的，必须指向由 fopen()或fsockopen()成功打开的文件(并还未由 fclose() 关闭)。</li>
<li>▲ fget()可以被用来模拟get/post请求，结合fopen()和fsockopen()两个函数</li>
</ul>
</li>
<li>Fread($find,获取字节) //指定获取内容</li>
<li>Filesize($find) //获取文件字节<ul>
<li>▲ $find 必须为路径</li>
</ul>
</li>
<li>Fclose($find) //关闭资源</li>
</ul>
</li>
<li>修改或添加文件内容<ul>
<li>Fopen(./1.xx,”a+”);</li>
<li>Fwrite(“文件”,”内容”);<ul>
<li>▲ 只能将字符串string写进文件，无法将数组写进</li>
<li>▲ 写进数组可借用file_put_contents()函数</li>
</ul>
</li>
<li>Fclose(find);  //关闭资源</li>
</ul>
</li>
<li>文件指针feof()<ul>
<li>▲ 文件指针必须是有效的，必须指向由 fopen()或fsockopen()成功打开的文件（并还未由 fclose()关闭）</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    //读文件</span><br><span class="line">    $f = fopen(&quot;./1.txt&quot;, &quot;a+&quot;);</span><br><span class="line"></span><br><span class="line">    echo Fgets($f);  //读第一行文件</span><br><span class="line">    echo Fgets($f);  //读第二行文件</span><br><span class="line">    echo Fread($f,2);  //获取文件前两个字符</span><br><span class="line"></span><br><span class="line">    echo Filesize($f);  //获取屋内按总的字符数</span><br><span class="line">    echo Fread($f,Filesize(&apos;./1.html&apos;));  //输出1.html中的所有内容</span><br><span class="line"></span><br><span class="line">    Fclose($f);  //关闭文件</span><br><span class="line">    echo Fread($f,2);  //无法读取到文件</span><br><span class="line"></span><br><span class="line">    //读写文件</span><br><span class="line">    $f = fopen(&quot;./1.txt&quot;, &quot;a+&quot;);</span><br><span class="line"></span><br><span class="line">    Fwrite($f,&apos;aaaaaa&apos;)  //在文件最后添加aaaaaa</span><br><span class="line">    Fclose($f);</span><br><span class="line"></span><br><span class="line">    $f = fopen(&quot;./1.txt&quot;, &quot;w&quot;);</span><br><span class="line"></span><br><span class="line">    Fwrite($f,&apos;aaaaaa&apos;)  //删除文件，并在文件开头添加aaaaaa</span><br><span class="line">    Fclose($f);</span><br><span class="line"></span><br><span class="line">    //路径拼接</span><br><span class="line"></span><br><span class="line">    $lujing = $_SERVER[&apos;DOCUMENT_ROOT&apos;].&quot;/&quot;;</span><br><span class="line"></span><br><span class="line">    $f = fopen($lujing.&quot;123.txt&quot;,&quot;a.txt&quot;);</span><br><span class="line"></span><br><span class="line">    Fwrite($f,&apos;aaaaaa\r\n&apos;);  //写入成功</span><br><span class="line"></span><br><span class="line">    //命令读取文件</span><br><span class="line"></span><br><span class="line">    echo `dir`;  //读取系统路径</span><br><span class="line"></span><br><span class="line">    echo `type d:\\1.txt`;  //读取1.txt文件中的内容</span><br><span class="line"></span><br><span class="line">    //文件指针</span><br><span class="line"></span><br><span class="line">    $f = fopen(&quot;./1.txt&quot;, &quot;r+&quot;);</span><br><span class="line">    while(!feof($f))</span><br><span class="line">    &#123;</span><br><span class="line">        $result.= fgets($f,128);</span><br><span class="line">    &#125;</span><br><span class="line">    echo $result;  //输出1.txt的所有内容</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0X01-文件包含"><a href="#0X01-文件包含" class="headerlink" title="0X01 文件包含"></a>0X01 文件包含</h3><h5 id="文件包含形式"><a href="#文件包含形式" class="headerlink" title="文件包含形式"></a>文件包含形式</h5><ul>
<li>四种文件包含形式<ul>
<li>Include：包含文件</li>
<li>Include_once：系统会自动判断文件包含过程中，是否已经包含过（一个文件最多被包含一次）</li>
<li>Require：与include相同</li>
<li>Require_once：以include_once相同</li>
</ul>
</li>
<li>向上包含<ul>
<li>先包含文件，后使用文件中的内容  </li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//include1.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    //被包含文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //定义数据</span><br><span class="line">    $a = 1;</span><br><span class="line">    define(&apos;PI&apos;,3.14);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//include2.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    //包含文件：使用数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //包含文件</span><br><span class="line">    include &apos;include1.php&apos;; //包含当前文件include2.php所在文件夹下的include1.php</span><br><span class="line"></span><br><span class="line">    echo $a,PI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //再次加载</span><br><span class="line">    //include &apos;include1.php&apos;;</span><br><span class="line"></span><br><span class="line">    //include_once</span><br><span class="line">    //include_once &apos;include1.php&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>向下包含<ul>
<li>先准备内容，然后包含另外的文件，在另外的文件中，使用当前的内容</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//include3.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    //定义数据</span><br><span class="line"></span><br><span class="line">    $a = 10;</span><br><span class="line">    const PI = 3.14;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //包含文件：为了显示以上数据</span><br><span class="line">    include_once &apos;include4.php&apos;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//include4.php</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;?php echo $a;?&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;?php echo PI;?&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul>
<li>Include和include_once<ul>
<li>Include系统会碰到一次，执行一次；如果对统一个文件进行多次加载，那么系统会执行多次；</li>
<li>Include_once：系统碰到多次，也只会执行一次。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//include2.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    //包含文件：使用数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //包含文件</span><br><span class="line">    include &apos;include1.php&apos;; //包含当前文件include2.php所在文件夹下的include1.php</span><br><span class="line"></span><br><span class="line">    echo $a,PI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //再次加载</span><br><span class="line">    //include &apos;include1.php&apos;;</span><br><span class="line"></span><br><span class="line">    //include_once</span><br><span class="line">    //include_once &apos;include1.php&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>Require和include<ul>
<li>本质都是包含文件，唯一的区别在于包含不到文件的时候，报错的形式不一样</li>
<li>Include的错误级别比较轻：不会阻止代码执行</li>
<li>Require要求较高：如果包含出错代码不再执行（require后面的代码）</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//include5.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    //require和include的区别</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //include包含文件</span><br><span class="line">    //include &apos;a.php&apos;;</span><br><span class="line"></span><br><span class="line">    //require包含文件</span><br><span class="line">    require &apos;a.php&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    echo &apos;hello world&apos;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="文件加载原理"><a href="#文件加载原理" class="headerlink" title="文件加载原理"></a>文件加载原理</h5><ul>
<li>PHP代码的执行流程<ul>
<li>读取代码文件（PHP程序）</li>
<li>编译：将PHP代码转换成字节码（生成opcode）</li>
<li>zendengine来解析opcode，按照字节码去进行逻辑运算</li>
<li>转换成对应的HTML代码</li>
</ul>
</li>
<li>文件加载原理<ul>
<li>在文件加载（include或者require）的时候，系统会自动的将被包含文件中的代码相当于嵌入到当前文件中</li>
<li>加载位置：在哪加载，对应的文件中的代码嵌入的位置就是对应的include位置</li>
<li>在PHP中被包含的文件是单独进行编译的</li>
</ul>
</li>
<li>▲ PHP文件在编译的过程中如果出现了语法错误，那么会失败（不会执行）；但是如果被包含文件有错误的时候，系统会在执行到包含include这条语句的时候才会报错</li>
</ul>
<h5 id="文件加载路径"><a href="#文件加载路径" class="headerlink" title="文件加载路径"></a>文件加载路径</h5><ul>
<li>文件在加载的时候需要指定文件路径才能保证PHP正确的找到对应的文件</li>
<li>绝对路径：从磁盘的根目录开始（本地绝对路径）<ul>
<li>Windows：盘符C:/路径/PHP文件</li>
<li>Linux：/路径/PHP文件</li>
</ul>
</li>
<li>相对路径：从当前文件所在目录开始的路径<ul>
<li>.|./：表示当前文件夹</li>
<li>../：上级目录（当前文件夹的上一层文件夹）</li>
</ul>
</li>
<li>效率对比<ul>
<li>绝对路径相对效率偏低，但是相对安全（路径不会出问题）</li>
<li>相对路径相对效率高些，但是容易出错（相对路径会发生改变）</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    //PHP文件加载路径</span><br><span class="line"></span><br><span class="line">    //相对路径加载</span><br><span class="line">    //include_once &apos;include1.php&apos;;  //默认当前文件本身</span><br><span class="line"></span><br><span class="line">    //include_once &apos;./include1.php&apos;;    </span><br><span class="line"></span><br><span class="line">    //复杂相对路径</span><br><span class="line">    //include_once &apos;../htdocs/include1.php&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //绝对路径</span><br><span class="line">    include_once &apos;D:/server/Apache24/htdocs/include1.php&apos;;</span><br><span class="line"></span><br><span class="line">    echo $a;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="文件嵌套包含"><a href="#文件嵌套包含" class="headerlink" title="文件嵌套包含"></a>文件嵌套包含</h5><ul>
<li>一个文件包含另外一个文件，同时被包含的文件又包含了另外一个文件</li>
</ul>
<h3 id="0X02-文件上传"><a href="#0X02-文件上传" class="headerlink" title="0X02 文件上传"></a>0X02 文件上传</h3><ul>
<li>表单的enctype属性规定在发送到服务器之前应该如何对表单数据进行编码<ul>
<li>application/x-www-form-urlencoded -&gt; 在发送前编码所有字符（默认）</li>
<li>multipart/form-data -&gt; 不对字符编码，在使用包含文件上传控件的表单时，必须使用该值</li>
<li>text/plain  -&gt; 空格转为”+”加号，但不对特殊字符编码</li>
</ul>
</li>
</ul>
<h5 id="配置php-ini"><a href="#配置php-ini" class="headerlink" title="配置php.ini"></a>配置php.ini</h5><ul>
<li>file_upload = on  //是否允许文件上传，默认开启，即允许上传文件</li>
<li>upload_tmp_dir =   //文件上传到服务器后产生的临时文件路径，如果没有指定临时文件路径，那么使用系统的临时目录，一般会修改配置文件，指定临时目录</li>
<li>upload_max_filesize = 2M  //允许上传的单个文件的最大值</li>
<li>max_file_uploads = 20  //一次上传文件允许的最大数目</li>
</ul>
<h5 id="新建一个文件上传"><a href="#新建一个文件上传" class="headerlink" title="新建一个文件上传"></a>新建一个文件上传</h5><ul>
<li>1.html</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form actiion=&quot;&quot; method=&quot;post&quot; enctype=&quot;,ultipart/form-data&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    上传:&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>demo.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    var_dump($_FILES);  //输出一个二维数组</span><br><span class="line"></span><br><span class="line">    include_once &apos;./1.html&apos;;</span><br><span class="line"></span><br><span class="line">    //上传文件</span><br><span class="line"></span><br><span class="line">    $f = empty($_FILES)?&quot;&quot; : $_FILES[&quot;file2&quot;][&quot;tmp_name&quot;];</span><br><span class="line"></span><br><span class="line">    switch($_FILES[&quot;file2&quot;][&quot;error&quot;])</span><br><span class="line">    &#123;</span><br><span class="line">        case 0:</span><br><span class="line">        @move_upload_file($f,&quot;./111.jpg&quot;);</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            # code...</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    //变化</span><br><span class="line">    时间戳 -&gt; time().&quot;.jpg&quot;</span><br><span class="line">    后缀截取 -&gt; $filechar = $_FILES[&apos;file2&apos;][&apos;name&apos;] -&gt; 字符串处理</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>php面向对象基础</title>
    <url>/2020/07/12/php_oop_base/</url>
    <content><![CDATA[<hr>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul>
<li>/www/class/DB.class.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    class DB</span><br><span class="line">    &#123;</span><br><span class="line">        public $host;</span><br><span class="line">        public $username;</span><br><span class="line">        public $password;</span><br><span class="line">        public $database;</span><br><span class="line"></span><br><span class="line">        //初始化数据库</span><br><span class="line">        function __construct($host=&apos;&apos;,$username=&apos;&apos;,$password=&apos;&apos;,$database=&apos;&apos;)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;host = empty($host)? $GLOBALS[&apos;con&apos;][&apos;host&apos;] : $host;</span><br><span class="line">            $this-&gt;username = empty($username)? $GLOBALS[&apos;con&apos;][&apos;username&apos;] : $username;</span><br><span class="line">            $this-&gt;password = empty($password)? $GLOBALS[&apos;con&apos;][&apos;password&apos;] : $password;</span><br><span class="line">            $this-&gt;database = empty($database)? $GLOBALS[&apos;con&apos;][&apos;database&apos;] : $database;</span><br><span class="line">            $lin = mysqli_connect($this-&gt;host,$this-&gt;username,$this-&gt;password);</span><br><span class="line">            $this-&gt;use_database($lin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //使用数据库</span><br><span class="line">        public function use_database($lin=&apos;&apos;)&#123;</span><br><span class="line">            mysqli_query($lin,&quot;use php_mysql_demo&quot;);</span><br><span class="line">            $list = mysqli_query($lin,&quot;select * from admin&quot;);</span><br><span class="line">            $list_data = mysqli_fetch_array($list,MYSQLI_ASSOC);  //数据的存储</span><br><span class="line">            var_dump($list_data);  //打印数据库的第一行数据</span><br><span class="line">            echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>/www/init.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    define(&apos;DIR_dang&apos;,$_SERVER[&apos;DOCUMENT_ROOT&apos;].&quot;/&quot;);  //取得系统路径的绝对路径</span><br><span class="line"></span><br><span class="line">    include_once DIR_dang.&apos;function.php&apos;;  //function.php的绝对路径</span><br><span class="line"></span><br><span class="line">    $con = include_once DIR_dang.&apos;conn.php&apos;;  //conn.php的绝对路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>/www/conn.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    //数据库默认参数</span><br><span class="line">    return array(</span><br><span class="line">        &quot;host&quot; =&gt; &apos;127.0.0.1&apos;,</span><br><span class="line">        &quot;username&quot; =&gt; &apos;root&apos;,</span><br><span class="line">        &quot;password&quot; =&gt; &apos;root&apos;,</span><br><span class="line">        &quot;database&quot; =&gt; &apos;admin&apos;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>/www/function.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">     </span><br><span class="line">    //function __autoload($class)</span><br><span class="line">        //&#123;</span><br><span class="line">            //默认从/includes去加载</span><br><span class="line">            //if(is_file(&quot;./class/$class.class.php&quot;))</span><br><span class="line">            //&#123;</span><br><span class="line">                //加载</span><br><span class="line">                //include_once &quot;./class/$class.class.php&quot;;</span><br><span class="line">            //&#125;</span><br><span class="line">        //&#125;</span><br><span class="line">    //__autoload方法已经被spl_autoload_register()所替代</span><br><span class="line">    function my_autoload($class)</span><br><span class="line">    &#123;</span><br><span class="line">        include &apos;./class/&apos;.$class.&apos;.class.php&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spl_autoload_register(&apos;my_autoload&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>/www/index.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    include_once &apos;./init.php&apos;;  //包含function.php和conn.php，并加载</span><br><span class="line"></span><br><span class="line">    //var_dump($GLOBALS[&apos;con&apos;][&apos;host&apos;]);  //测试$GLOBALS参数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $mysql = new DB();  //创建一个对象</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
</search>
